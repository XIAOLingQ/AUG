{"ast":null,"code":"import MarkdownIt from 'markdown-it';\nimport markdownItFootnote from 'markdown-it-footnote';\nimport markdownItTaskLists from 'markdown-it-task-lists';\nimport markdownItAbbr from 'markdown-it-abbr';\nimport markdownItContainer from 'markdown-it-container';\nimport hljs from 'highlight.js';\nimport markdownItHighlightjs from 'markdown-it-highlightjs';\nexport default {\n  data() {\n    return {\n      markdown: `\n**快速排序**算法是一种基于分治法的高效排序\n以下是一个简单的快速排序算法的Python实现：\n\n\\`\\`\\`python\ndef quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    less = [x for x in arr[1:] if x <= pivot]\n    greater = [x for x in arr[1:] if x > pivot]\n    return quick_sort(less) + [pivot] + quick_sort(greater)\n\nexample_array = [7, 2, 1, 6, 8, 5, 3, 4]\nsorted_array = quick_sort(example_array)\nprint(sorted_array)\n\\`\\`\\`\n\n这个代码实现了快速排序算法。\n`,\n      md: new MarkdownIt().use(markdownItFootnote).use(markdownItTaskLists, {\n        enabled: true\n      }).use(markdownItAbbr).use(markdownItContainer, 'warning').use(markdownItHighlightjs, {\n        hljs\n      }) // 添加 markdown-it-highlightjs 插件\n    };\n  },\n  computed: {\n    html() {\n      // 预处理 Markdown 以渲染内容\n      this.markdown = this.markdown.replace(/\\*\\*\\s*([^*]*?)\\s*(:\\s*)?\\*\\*/g, '**$1$2**');\n      return this.md.render(this.markdown);\n    }\n  },\n  mounted() {\n    // 代码块渲染后添加复制按钮\n    this.addCopyButtons();\n  },\n  methods: {\n    addCopyButtons() {\n      // 查找所有的 <pre><code> 元素\n      const codeBlocks = document.querySelectorAll('pre code');\n      codeBlocks.forEach(block => {\n        const button = document.createElement('button');\n        button.innerText = '复制';\n        button.classList.add('copy-button');\n\n        // 按钮点击事件\n        button.addEventListener('click', () => {\n          const codeText = block.innerText;\n          navigator.clipboard.writeText(codeText).then(() => {\n            alert('代码已复制!');\n          }).catch(err => {\n            console.error('复制失败:', err);\n          });\n        });\n\n        // 将按钮插入到每个代码块上方\n        block.parentNode.style.position = 'relative';\n        block.parentNode.appendChild(button);\n      });\n    }\n  }\n};","map":{"version":3,"names":["MarkdownIt","markdownItFootnote","markdownItTaskLists","markdownItAbbr","markdownItContainer","hljs","markdownItHighlightjs","data","markdown","md","use","enabled","computed","html","replace","render","mounted","addCopyButtons","methods","codeBlocks","document","querySelectorAll","forEach","block","button","createElement","innerText","classList","add","addEventListener","codeText","navigator","clipboard","writeText","then","alert","catch","err","console","error","parentNode","style","position","appendChild"],"sources":["src/views/HomeView.vue"],"sourcesContent":["<template>\r\n  <div class=\"home\">\r\n    <div class=\"home-right\">\r\n      <div class=\"right-version\">\r\n        <div class=\"llm-chat-demo\">\r\n          <span class=\"chat-demo\">Chat Demo</span><span class=\"version\"> V1</span>\r\n        </div>\r\n      </div>\r\n      <div class=\"right-body\" :class=\"messages.length === 0 ? 'nodata' : ''\" ref=\"messageContainer\">\r\n        <div v-for=\"(message, index) in messages\" class=\"main-message\" :key=\"index\"\r\n             :class=\"{'user-message': message.sender === 'user', 'friend-message': message.sender === 'friend'}\">\r\n          <!-- 显示用户标识和图片 -->\r\n          <div class=\"message-sender\"\r\n               :class=\"{'user-message': message.sender === 'user', 'friend-message': message.sender === 'friend'}\">\r\n            <img v-if=\"message.sender === 'user'\" src=\"@/assets/我的.png\" alt=\"User Icon\">\r\n            <img v-else-if=\"message.sender === 'friend'\" src=\"@/assets/我的2.png\" alt=\"Friend Icon\">\r\n            <span class=\"message-sender-name\"\r\n                  :class=\"message.sender === 'user' ? 'user-color' : 'friend-color'\">{{ message.sender }}:</span>\r\n          </div>\r\n          <div v-if=\"message.sender === 'user'\" class=\"user-message\">{{ message.content }}</div>\r\n          <div v-else class=\"friend-message\" v-html=\"message.content\"></div>\r\n        </div>\r\n      </div>\r\n      <div class=\"right-input\" @keyup.enter=\"handleSearch\">\r\n        <!-- 输入框 -->\r\n        <el-input v-model=\"queryKeyword\" placeholder=\"给Chat Demo发送消息\" class=\"input\"></el-input>\r\n        <!-- 查询按钮 -->\r\n        <el-button v-if=\"!loading\" type=\"primary\" @click=\"handleSearch\">\r\n          <img  class=\"up-load\" src=\"@/assets/上传.png\">\r\n        </el-button>\r\n        <el-button v-if=\"loading\" type=\"primary\" @click=\"closeEventSource\">\r\n          <img  class=\"up-load\" src=\"@/assets/等待.png\" >\r\n        </el-button>\r\n      </div>\r\n      <div class=\"sec-notice\">Chat Demo may also make mistakes. Please consider checking important information.</div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport MarkdownIt from 'markdown-it';\r\nimport markdownItFootnote from 'markdown-it-footnote';\r\nimport markdownItTaskLists from 'markdown-it-task-lists';\r\nimport markdownItAbbr from 'markdown-it-abbr';\r\nimport markdownItContainer from 'markdown-it-container';\r\nimport hljs from 'highlight.js';\r\nimport markdownItHighlightjs from 'markdown-it-highlightjs';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      markdown: `\r\n**快速排序**算法是一种基于分治法的高效排序\r\n以下是一个简单的快速排序算法的Python实现：\r\n\r\n\\`\\`\\`python\r\ndef quick_sort(arr):\r\n    if len(arr) <= 1:\r\n        return arr\r\n    pivot = arr[0]\r\n    less = [x for x in arr[1:] if x <= pivot]\r\n    greater = [x for x in arr[1:] if x > pivot]\r\n    return quick_sort(less) + [pivot] + quick_sort(greater)\r\n\r\nexample_array = [7, 2, 1, 6, 8, 5, 3, 4]\r\nsorted_array = quick_sort(example_array)\r\nprint(sorted_array)\r\n\\`\\`\\`\r\n\r\n这个代码实现了快速排序算法。\r\n`,\r\n      md: new MarkdownIt()\r\n        .use(markdownItFootnote)\r\n        .use(markdownItTaskLists, { enabled: true })\r\n        .use(markdownItAbbr)\r\n        .use(markdownItContainer, 'warning')\r\n        .use(markdownItHighlightjs, { hljs }), // 添加 markdown-it-highlightjs 插件\r\n    };\r\n  },\r\n  computed: {\r\n    html() {\r\n      // 预处理 Markdown 以渲染内容\r\n      this.markdown = this.markdown.replace(/\\*\\*\\s*([^*]*?)\\s*(:\\s*)?\\*\\*/g, '**$1$2**');\r\n      return this.md.render(this.markdown);\r\n    }\r\n  },\r\n  mounted() {\r\n    // 代码块渲染后添加复制按钮\r\n    this.addCopyButtons();\r\n  },\r\n  methods: {\r\n    addCopyButtons() {\r\n      // 查找所有的 <pre><code> 元素\r\n      const codeBlocks = document.querySelectorAll('pre code');\r\n\r\n      codeBlocks.forEach((block) => {\r\n        const button = document.createElement('button');\r\n        button.innerText = '复制';\r\n        button.classList.add('copy-button');\r\n\r\n        // 按钮点击事件\r\n        button.addEventListener('click', () => {\r\n          const codeText = block.innerText;\r\n          navigator.clipboard.writeText(codeText)\r\n              .then(() => {\r\n                alert('代码已复制!');\r\n              })\r\n              .catch(err => {\r\n                console.error('复制失败:', err);\r\n              });\r\n        });\r\n\r\n        // 将按钮插入到每个代码块上方\r\n        block.parentNode.style.position = 'relative';\r\n        block.parentNode.appendChild(button);\r\n      });\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n\r\n<style scoped>\r\n.home {\r\n  height: 100%;\r\n  display: flex;\r\n}\r\n\r\n.home-right {\r\n  width: 100%;\r\n}\r\n\r\n.right-version {\r\n  //width: 60%;\r\n  margin: auto;\r\n  //background-color: #F9FFD8;\r\n  height: 5%;\r\n  display: flex;\r\n  justify-content: start;\r\n  align-items: center;\r\n  border-radius: 15px;\r\n  margin-bottom: 12px;\r\n}\r\n\r\n.version {\r\n  color: rgb(155, 155, 155);\r\n}\r\n\r\n.llm-chat-demo {\r\n  width: 58%;\r\n  margin: auto;\r\n  //margin-left: 20px;\r\n  //font-family: \"黑体\", \"SimHei\", sans-serif;\r\n  font-family: Söhne, ui-sans-serif, system;\r\n  font-variation-settings: normal;\r\n  font-weight: 550;\r\n  font-size: 18px;\r\n  cursor: pointer;\r\n  color-scheme: light;\r\n}\r\n\r\n.chat-demo {\r\n  opacity: 0.65; /* 设置透明度为 0.7，您可以根据需要调整这个值 */\r\n}\r\n\r\n.right-body {\r\n  height: 85%;\r\n  overflow-y: auto;\r\n}\r\n\r\n.user-color {\r\n  color: #1296db;\r\n}\r\n\r\n.friend-color {\r\n  color: #77FC5D;\r\n}\r\n.nodata {\r\n  background-image: url(\"@/assets/happy.png\");\r\n  background-repeat: no-repeat;\r\n  background-size: 35%;\r\n  background-position: center 50%;\r\n}\r\n\r\n.main-message {\r\n  margin: auto;\r\n  width: 58%;\r\n  justify-content: center;\r\n}\r\n\r\n.message-sender-name {\r\n  margin-left: 10px;\r\n  //font-family: \"黑体\", \"SimHei\", sans-serif;\r\n  font-family: Söhne, ui-sans-serif, system;\r\n  font-weight: 550;\r\n  font-size: 18px;\r\n}\r\n\r\n.right-input {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 6.5%;\r\n\r\n  position: relative;\r\n}\r\n\r\n.sec-notice {\r\n  height: 3.5%;\r\n  font-size: 12px;\r\n  font-family: Söhne, ui-sans-serif;\r\n  color: rgb(155, 155, 155);\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n.input {\r\n  width: 58%;\r\n  margin-right: 5px;\r\n}\r\n\r\n.up-load {\r\n  //width: 30px;\r\n}\r\n\r\n::v-deep .el-button {\r\n  padding: 5px 6px;\r\n}\r\n\r\n::v-deep .el-input__inner {\r\n  height: 52px;\r\n  border-radius: 15px;\r\n  border: 1px solid #DCDFE6;\r\n}\r\n\r\n::v-deep .el-button--primary {\r\n  position: relative;\r\n  right: 3.5%;\r\n  background-color: rgba(180, 180, 180, 0.3) !important;\r\n  color: black !important;\r\n  border-color: rgba(180, 180, 180, 0.3) !important;\r\n}\r\n\r\n.user-message {\r\n  text-align: left;\r\n  padding: 5px;\r\n  margin-bottom: 5px;\r\n  border-radius: 15px;\r\n\r\n}\r\n\r\n.friend-message {\r\n  background-color: rgba(227, 255, 255, 0.2); /* 这里的 0.5 是透明度，你可以根据需要调整 */\r\n  text-align: left;\r\n  padding: 5px;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n::v-deep .friend-message pre .hljs {\r\n  border-radius: 10px !important; /* 圆角 */\r\n  background-color: #FAF7F7; /* 例子中的背景色 */\r\n}\r\n\r\n/* 设置滚动条的样式 */\r\n::-webkit-scrollbar {\r\n  width: 6px; /* 设置滚动条宽度 */\r\n}\r\n\r\n/* 设置滚动条轨道的样式 */\r\n::-webkit-scrollbar-track {\r\n  background: #f1f1f1; /* 设置滚动条轨道的背景色 */\r\n}\r\n\r\n/* 设置滚动条滑块的样式 */\r\n::-webkit-scrollbar-thumb {\r\n  background: #888; /* 设置滚动条滑块的背景色 */\r\n  border-radius: 3px; /* 设置滚动条滑块的圆角 */\r\n}\r\n\r\n/* 鼠标悬停时滚动条滑块的样式 */\r\n::-webkit-scrollbar-thumb:hover {\r\n  background: #555; /* 设置鼠标悬停时滚动条滑块的背景色 */\r\n}\r\n</style>\r\n"],"mappings":"AAwCA,OAAAA,UAAA;AACA,OAAAC,kBAAA;AACA,OAAAC,mBAAA;AACA,OAAAC,cAAA;AACA,OAAAC,mBAAA;AACA,OAAAC,IAAA;AACA,OAAAC,qBAAA;AAEA;EACAC,KAAA;IACA;MACAC,QAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;MACAC,EAAA,MAAAT,UAAA,GACAU,GAAA,CAAAT,kBAAA,EACAS,GAAA,CAAAR,mBAAA;QAAAS,OAAA;MAAA,GACAD,GAAA,CAAAP,cAAA,EACAO,GAAA,CAAAN,mBAAA,aACAM,GAAA,CAAAJ,qBAAA;QAAAD;MAAA;IACA;EACA;EACAO,QAAA;IACAC,KAAA;MACA;MACA,KAAAL,QAAA,QAAAA,QAAA,CAAAM,OAAA;MACA,YAAAL,EAAA,CAAAM,MAAA,MAAAP,QAAA;IACA;EACA;EACAQ,QAAA;IACA;IACA,KAAAC,cAAA;EACA;EACAC,OAAA;IACAD,eAAA;MACA;MACA,MAAAE,UAAA,GAAAC,QAAA,CAAAC,gBAAA;MAEAF,UAAA,CAAAG,OAAA,CAAAC,KAAA;QACA,MAAAC,MAAA,GAAAJ,QAAA,CAAAK,aAAA;QACAD,MAAA,CAAAE,SAAA;QACAF,MAAA,CAAAG,SAAA,CAAAC,GAAA;;QAEA;QACAJ,MAAA,CAAAK,gBAAA;UACA,MAAAC,QAAA,GAAAP,KAAA,CAAAG,SAAA;UACAK,SAAA,CAAAC,SAAA,CAAAC,SAAA,CAAAH,QAAA,EACAI,IAAA;YACAC,KAAA;UACA,GACAC,KAAA,CAAAC,GAAA;YACAC,OAAA,CAAAC,KAAA,UAAAF,GAAA;UACA;QACA;;QAEA;QACAd,KAAA,CAAAiB,UAAA,CAAAC,KAAA,CAAAC,QAAA;QACAnB,KAAA,CAAAiB,UAAA,CAAAG,WAAA,CAAAnB,MAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}