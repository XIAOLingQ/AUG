{"ast":null,"code":"/*\nLanguage: Coq\nAuthor: Stephan Boyer <stephan@stephanboyer.com>\nCategory: functional\nWebsite: https://coq.inria.fr\n*/\n\n/** @type LanguageFn */\nfunction coq(hljs) {\n  const KEYWORDS = [\"_|0\", \"as\", \"at\", \"cofix\", \"else\", \"end\", \"exists\", \"exists2\", \"fix\", \"for\", \"forall\", \"fun\", \"if\", \"IF\", \"in\", \"let\", \"match\", \"mod\", \"Prop\", \"return\", \"Set\", \"then\", \"Type\", \"using\", \"where\", \"with\", \"Abort\", \"About\", \"Add\", \"Admit\", \"Admitted\", \"All\", \"Arguments\", \"Assumptions\", \"Axiom\", \"Back\", \"BackTo\", \"Backtrack\", \"Bind\", \"Blacklist\", \"Canonical\", \"Cd\", \"Check\", \"Class\", \"Classes\", \"Close\", \"Coercion\", \"Coercions\", \"CoFixpoint\", \"CoInductive\", \"Collection\", \"Combined\", \"Compute\", \"Conjecture\", \"Conjectures\", \"Constant\", \"constr\", \"Constraint\", \"Constructors\", \"Context\", \"Corollary\", \"CreateHintDb\", \"Cut\", \"Declare\", \"Defined\", \"Definition\", \"Delimit\", \"Dependencies\", \"Dependent\", \"Derive\", \"Drop\", \"eauto\", \"End\", \"Equality\", \"Eval\", \"Example\", \"Existential\", \"Existentials\", \"Existing\", \"Export\", \"exporting\", \"Extern\", \"Extract\", \"Extraction\", \"Fact\", \"Field\", \"Fields\", \"File\", \"Fixpoint\", \"Focus\", \"for\", \"From\", \"Function\", \"Functional\", \"Generalizable\", \"Global\", \"Goal\", \"Grab\", \"Grammar\", \"Graph\", \"Guarded\", \"Heap\", \"Hint\", \"HintDb\", \"Hints\", \"Hypotheses\", \"Hypothesis\", \"ident\", \"Identity\", \"If\", \"Immediate\", \"Implicit\", \"Import\", \"Include\", \"Inductive\", \"Infix\", \"Info\", \"Initial\", \"Inline\", \"Inspect\", \"Instance\", \"Instances\", \"Intro\", \"Intros\", \"Inversion\", \"Inversion_clear\", \"Language\", \"Left\", \"Lemma\", \"Let\", \"Libraries\", \"Library\", \"Load\", \"LoadPath\", \"Local\", \"Locate\", \"Ltac\", \"ML\", \"Mode\", \"Module\", \"Modules\", \"Monomorphic\", \"Morphism\", \"Next\", \"NoInline\", \"Notation\", \"Obligation\", \"Obligations\", \"Opaque\", \"Open\", \"Optimize\", \"Options\", \"Parameter\", \"Parameters\", \"Parametric\", \"Path\", \"Paths\", \"pattern\", \"Polymorphic\", \"Preterm\", \"Print\", \"Printing\", \"Program\", \"Projections\", \"Proof\", \"Proposition\", \"Pwd\", \"Qed\", \"Quit\", \"Rec\", \"Record\", \"Recursive\", \"Redirect\", \"Relation\", \"Remark\", \"Remove\", \"Require\", \"Reserved\", \"Reset\", \"Resolve\", \"Restart\", \"Rewrite\", \"Right\", \"Ring\", \"Rings\", \"Save\", \"Scheme\", \"Scope\", \"Scopes\", \"Script\", \"Search\", \"SearchAbout\", \"SearchHead\", \"SearchPattern\", \"SearchRewrite\", \"Section\", \"Separate\", \"Set\", \"Setoid\", \"Show\", \"Solve\", \"Sorted\", \"Step\", \"Strategies\", \"Strategy\", \"Structure\", \"SubClass\", \"Table\", \"Tables\", \"Tactic\", \"Term\", \"Test\", \"Theorem\", \"Time\", \"Timeout\", \"Transparent\", \"Type\", \"Typeclasses\", \"Types\", \"Undelimit\", \"Undo\", \"Unfocus\", \"Unfocused\", \"Unfold\", \"Universe\", \"Universes\", \"Unset\", \"Unshelve\", \"using\", \"Variable\", \"Variables\", \"Variant\", \"Verbose\", \"Visibility\", \"where\", \"with\"];\n  const BUILT_INS = [\"abstract\", \"absurd\", \"admit\", \"after\", \"apply\", \"as\", \"assert\", \"assumption\", \"at\", \"auto\", \"autorewrite\", \"autounfold\", \"before\", \"bottom\", \"btauto\", \"by\", \"case\", \"case_eq\", \"cbn\", \"cbv\", \"change\", \"classical_left\", \"classical_right\", \"clear\", \"clearbody\", \"cofix\", \"compare\", \"compute\", \"congruence\", \"constr_eq\", \"constructor\", \"contradict\", \"contradiction\", \"cut\", \"cutrewrite\", \"cycle\", \"decide\", \"decompose\", \"dependent\", \"destruct\", \"destruction\", \"dintuition\", \"discriminate\", \"discrR\", \"do\", \"double\", \"dtauto\", \"eapply\", \"eassumption\", \"eauto\", \"ecase\", \"econstructor\", \"edestruct\", \"ediscriminate\", \"eelim\", \"eexact\", \"eexists\", \"einduction\", \"einjection\", \"eleft\", \"elim\", \"elimtype\", \"enough\", \"equality\", \"erewrite\", \"eright\", \"esimplify_eq\", \"esplit\", \"evar\", \"exact\", \"exactly_once\", \"exfalso\", \"exists\", \"f_equal\", \"fail\", \"field\", \"field_simplify\", \"field_simplify_eq\", \"first\", \"firstorder\", \"fix\", \"fold\", \"fourier\", \"functional\", \"generalize\", \"generalizing\", \"gfail\", \"give_up\", \"has_evar\", \"hnf\", \"idtac\", \"in\", \"induction\", \"injection\", \"instantiate\", \"intro\", \"intro_pattern\", \"intros\", \"intuition\", \"inversion\", \"inversion_clear\", \"is_evar\", \"is_var\", \"lapply\", \"lazy\", \"left\", \"lia\", \"lra\", \"move\", \"native_compute\", \"nia\", \"nsatz\", \"omega\", \"once\", \"pattern\", \"pose\", \"progress\", \"proof\", \"psatz\", \"quote\", \"record\", \"red\", \"refine\", \"reflexivity\", \"remember\", \"rename\", \"repeat\", \"replace\", \"revert\", \"revgoals\", \"rewrite\", \"rewrite_strat\", \"right\", \"ring\", \"ring_simplify\", \"rtauto\", \"set\", \"setoid_reflexivity\", \"setoid_replace\", \"setoid_rewrite\", \"setoid_symmetry\", \"setoid_transitivity\", \"shelve\", \"shelve_unifiable\", \"simpl\", \"simple\", \"simplify_eq\", \"solve\", \"specialize\", \"split\", \"split_Rabs\", \"split_Rmult\", \"stepl\", \"stepr\", \"subst\", \"sum\", \"swap\", \"symmetry\", \"tactic\", \"tauto\", \"time\", \"timeout\", \"top\", \"transitivity\", \"trivial\", \"try\", \"tryif\", \"unfold\", \"unify\", \"until\", \"using\", \"vm_compute\", \"with\"];\n  return {\n    name: 'Coq',\n    keywords: {\n      keyword: KEYWORDS,\n      built_in: BUILT_INS\n    },\n    contains: [hljs.QUOTE_STRING_MODE, hljs.COMMENT('\\\\(\\\\*', '\\\\*\\\\)'), hljs.C_NUMBER_MODE, {\n      className: 'type',\n      excludeBegin: true,\n      begin: '\\\\|\\\\s*',\n      end: '\\\\w+'\n    }, {\n      // relevance booster\n      begin: /[-=]>/\n    }]\n  };\n}\nmodule.exports = coq;","map":{"version":3,"names":["coq","hljs","KEYWORDS","BUILT_INS","name","keywords","keyword","built_in","contains","QUOTE_STRING_MODE","COMMENT","C_NUMBER_MODE","className","excludeBegin","begin","end","module","exports"],"sources":["E:/GLM-UML/llm-chat-demo/chat-frontend/node_modules/highlight.js/lib/languages/coq.js"],"sourcesContent":["/*\nLanguage: Coq\nAuthor: Stephan Boyer <stephan@stephanboyer.com>\nCategory: functional\nWebsite: https://coq.inria.fr\n*/\n\n/** @type LanguageFn */\nfunction coq(hljs) {\n  const KEYWORDS = [\n    \"_|0\",\n    \"as\",\n    \"at\",\n    \"cofix\",\n    \"else\",\n    \"end\",\n    \"exists\",\n    \"exists2\",\n    \"fix\",\n    \"for\",\n    \"forall\",\n    \"fun\",\n    \"if\",\n    \"IF\",\n    \"in\",\n    \"let\",\n    \"match\",\n    \"mod\",\n    \"Prop\",\n    \"return\",\n    \"Set\",\n    \"then\",\n    \"Type\",\n    \"using\",\n    \"where\",\n    \"with\",\n    \"Abort\",\n    \"About\",\n    \"Add\",\n    \"Admit\",\n    \"Admitted\",\n    \"All\",\n    \"Arguments\",\n    \"Assumptions\",\n    \"Axiom\",\n    \"Back\",\n    \"BackTo\",\n    \"Backtrack\",\n    \"Bind\",\n    \"Blacklist\",\n    \"Canonical\",\n    \"Cd\",\n    \"Check\",\n    \"Class\",\n    \"Classes\",\n    \"Close\",\n    \"Coercion\",\n    \"Coercions\",\n    \"CoFixpoint\",\n    \"CoInductive\",\n    \"Collection\",\n    \"Combined\",\n    \"Compute\",\n    \"Conjecture\",\n    \"Conjectures\",\n    \"Constant\",\n    \"constr\",\n    \"Constraint\",\n    \"Constructors\",\n    \"Context\",\n    \"Corollary\",\n    \"CreateHintDb\",\n    \"Cut\",\n    \"Declare\",\n    \"Defined\",\n    \"Definition\",\n    \"Delimit\",\n    \"Dependencies\",\n    \"Dependent\",\n    \"Derive\",\n    \"Drop\",\n    \"eauto\",\n    \"End\",\n    \"Equality\",\n    \"Eval\",\n    \"Example\",\n    \"Existential\",\n    \"Existentials\",\n    \"Existing\",\n    \"Export\",\n    \"exporting\",\n    \"Extern\",\n    \"Extract\",\n    \"Extraction\",\n    \"Fact\",\n    \"Field\",\n    \"Fields\",\n    \"File\",\n    \"Fixpoint\",\n    \"Focus\",\n    \"for\",\n    \"From\",\n    \"Function\",\n    \"Functional\",\n    \"Generalizable\",\n    \"Global\",\n    \"Goal\",\n    \"Grab\",\n    \"Grammar\",\n    \"Graph\",\n    \"Guarded\",\n    \"Heap\",\n    \"Hint\",\n    \"HintDb\",\n    \"Hints\",\n    \"Hypotheses\",\n    \"Hypothesis\",\n    \"ident\",\n    \"Identity\",\n    \"If\",\n    \"Immediate\",\n    \"Implicit\",\n    \"Import\",\n    \"Include\",\n    \"Inductive\",\n    \"Infix\",\n    \"Info\",\n    \"Initial\",\n    \"Inline\",\n    \"Inspect\",\n    \"Instance\",\n    \"Instances\",\n    \"Intro\",\n    \"Intros\",\n    \"Inversion\",\n    \"Inversion_clear\",\n    \"Language\",\n    \"Left\",\n    \"Lemma\",\n    \"Let\",\n    \"Libraries\",\n    \"Library\",\n    \"Load\",\n    \"LoadPath\",\n    \"Local\",\n    \"Locate\",\n    \"Ltac\",\n    \"ML\",\n    \"Mode\",\n    \"Module\",\n    \"Modules\",\n    \"Monomorphic\",\n    \"Morphism\",\n    \"Next\",\n    \"NoInline\",\n    \"Notation\",\n    \"Obligation\",\n    \"Obligations\",\n    \"Opaque\",\n    \"Open\",\n    \"Optimize\",\n    \"Options\",\n    \"Parameter\",\n    \"Parameters\",\n    \"Parametric\",\n    \"Path\",\n    \"Paths\",\n    \"pattern\",\n    \"Polymorphic\",\n    \"Preterm\",\n    \"Print\",\n    \"Printing\",\n    \"Program\",\n    \"Projections\",\n    \"Proof\",\n    \"Proposition\",\n    \"Pwd\",\n    \"Qed\",\n    \"Quit\",\n    \"Rec\",\n    \"Record\",\n    \"Recursive\",\n    \"Redirect\",\n    \"Relation\",\n    \"Remark\",\n    \"Remove\",\n    \"Require\",\n    \"Reserved\",\n    \"Reset\",\n    \"Resolve\",\n    \"Restart\",\n    \"Rewrite\",\n    \"Right\",\n    \"Ring\",\n    \"Rings\",\n    \"Save\",\n    \"Scheme\",\n    \"Scope\",\n    \"Scopes\",\n    \"Script\",\n    \"Search\",\n    \"SearchAbout\",\n    \"SearchHead\",\n    \"SearchPattern\",\n    \"SearchRewrite\",\n    \"Section\",\n    \"Separate\",\n    \"Set\",\n    \"Setoid\",\n    \"Show\",\n    \"Solve\",\n    \"Sorted\",\n    \"Step\",\n    \"Strategies\",\n    \"Strategy\",\n    \"Structure\",\n    \"SubClass\",\n    \"Table\",\n    \"Tables\",\n    \"Tactic\",\n    \"Term\",\n    \"Test\",\n    \"Theorem\",\n    \"Time\",\n    \"Timeout\",\n    \"Transparent\",\n    \"Type\",\n    \"Typeclasses\",\n    \"Types\",\n    \"Undelimit\",\n    \"Undo\",\n    \"Unfocus\",\n    \"Unfocused\",\n    \"Unfold\",\n    \"Universe\",\n    \"Universes\",\n    \"Unset\",\n    \"Unshelve\",\n    \"using\",\n    \"Variable\",\n    \"Variables\",\n    \"Variant\",\n    \"Verbose\",\n    \"Visibility\",\n    \"where\",\n    \"with\"\n  ];\n  const BUILT_INS = [\n    \"abstract\",\n    \"absurd\",\n    \"admit\",\n    \"after\",\n    \"apply\",\n    \"as\",\n    \"assert\",\n    \"assumption\",\n    \"at\",\n    \"auto\",\n    \"autorewrite\",\n    \"autounfold\",\n    \"before\",\n    \"bottom\",\n    \"btauto\",\n    \"by\",\n    \"case\",\n    \"case_eq\",\n    \"cbn\",\n    \"cbv\",\n    \"change\",\n    \"classical_left\",\n    \"classical_right\",\n    \"clear\",\n    \"clearbody\",\n    \"cofix\",\n    \"compare\",\n    \"compute\",\n    \"congruence\",\n    \"constr_eq\",\n    \"constructor\",\n    \"contradict\",\n    \"contradiction\",\n    \"cut\",\n    \"cutrewrite\",\n    \"cycle\",\n    \"decide\",\n    \"decompose\",\n    \"dependent\",\n    \"destruct\",\n    \"destruction\",\n    \"dintuition\",\n    \"discriminate\",\n    \"discrR\",\n    \"do\",\n    \"double\",\n    \"dtauto\",\n    \"eapply\",\n    \"eassumption\",\n    \"eauto\",\n    \"ecase\",\n    \"econstructor\",\n    \"edestruct\",\n    \"ediscriminate\",\n    \"eelim\",\n    \"eexact\",\n    \"eexists\",\n    \"einduction\",\n    \"einjection\",\n    \"eleft\",\n    \"elim\",\n    \"elimtype\",\n    \"enough\",\n    \"equality\",\n    \"erewrite\",\n    \"eright\",\n    \"esimplify_eq\",\n    \"esplit\",\n    \"evar\",\n    \"exact\",\n    \"exactly_once\",\n    \"exfalso\",\n    \"exists\",\n    \"f_equal\",\n    \"fail\",\n    \"field\",\n    \"field_simplify\",\n    \"field_simplify_eq\",\n    \"first\",\n    \"firstorder\",\n    \"fix\",\n    \"fold\",\n    \"fourier\",\n    \"functional\",\n    \"generalize\",\n    \"generalizing\",\n    \"gfail\",\n    \"give_up\",\n    \"has_evar\",\n    \"hnf\",\n    \"idtac\",\n    \"in\",\n    \"induction\",\n    \"injection\",\n    \"instantiate\",\n    \"intro\",\n    \"intro_pattern\",\n    \"intros\",\n    \"intuition\",\n    \"inversion\",\n    \"inversion_clear\",\n    \"is_evar\",\n    \"is_var\",\n    \"lapply\",\n    \"lazy\",\n    \"left\",\n    \"lia\",\n    \"lra\",\n    \"move\",\n    \"native_compute\",\n    \"nia\",\n    \"nsatz\",\n    \"omega\",\n    \"once\",\n    \"pattern\",\n    \"pose\",\n    \"progress\",\n    \"proof\",\n    \"psatz\",\n    \"quote\",\n    \"record\",\n    \"red\",\n    \"refine\",\n    \"reflexivity\",\n    \"remember\",\n    \"rename\",\n    \"repeat\",\n    \"replace\",\n    \"revert\",\n    \"revgoals\",\n    \"rewrite\",\n    \"rewrite_strat\",\n    \"right\",\n    \"ring\",\n    \"ring_simplify\",\n    \"rtauto\",\n    \"set\",\n    \"setoid_reflexivity\",\n    \"setoid_replace\",\n    \"setoid_rewrite\",\n    \"setoid_symmetry\",\n    \"setoid_transitivity\",\n    \"shelve\",\n    \"shelve_unifiable\",\n    \"simpl\",\n    \"simple\",\n    \"simplify_eq\",\n    \"solve\",\n    \"specialize\",\n    \"split\",\n    \"split_Rabs\",\n    \"split_Rmult\",\n    \"stepl\",\n    \"stepr\",\n    \"subst\",\n    \"sum\",\n    \"swap\",\n    \"symmetry\",\n    \"tactic\",\n    \"tauto\",\n    \"time\",\n    \"timeout\",\n    \"top\",\n    \"transitivity\",\n    \"trivial\",\n    \"try\",\n    \"tryif\",\n    \"unfold\",\n    \"unify\",\n    \"until\",\n    \"using\",\n    \"vm_compute\",\n    \"with\"\n  ];\n  return {\n    name: 'Coq',\n    keywords: {\n      keyword: KEYWORDS,\n      built_in: BUILT_INS\n    },\n    contains: [\n      hljs.QUOTE_STRING_MODE,\n      hljs.COMMENT('\\\\(\\\\*', '\\\\*\\\\)'),\n      hljs.C_NUMBER_MODE,\n      {\n        className: 'type',\n        excludeBegin: true,\n        begin: '\\\\|\\\\s*',\n        end: '\\\\w+'\n      },\n      { // relevance booster\n        begin: /[-=]>/ }\n    ]\n  };\n}\n\nmodule.exports = coq;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}