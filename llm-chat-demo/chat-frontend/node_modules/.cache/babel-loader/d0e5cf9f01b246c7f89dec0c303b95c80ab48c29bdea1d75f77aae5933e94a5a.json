{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport MarkdownIt from 'markdown-it';\nimport markdownItFootnote from 'markdown-it-footnote';\nimport markdownItTaskLists from 'markdown-it-task-lists';\nimport markdownItAbbr from 'markdown-it-abbr';\nimport markdownItContainer from 'markdown-it-container';\nimport hljs from 'highlight.js';\nimport markdownItHighlightjs from 'markdown-it-highlightjs';\nexport default {\n  name: 'HomeView',\n  components: {},\n  computed: {\n    // 将 Markdown 文本渲染为 HTML\n    html() {\n      return this.md.render(this.message);\n    }\n  },\n  data() {\n    return {\n      md: new MarkdownIt().use(markdownItFootnote).use(markdownItTaskLists, {\n        enabled: true\n      }).use(markdownItAbbr).use(markdownItContainer, 'warning').use(markdownItHighlightjs, {\n        hljs\n      }),\n      // 添加 markdown-it-highlightjs 插件\n      queryKeyword: '',\n      tempResult: {},\n      loading: false,\n      messages: [],\n      socket: null,\n      eventSource: null,\n      // 添加事件源变量\n      stopIcon: '@/assets/等待.png',\n      uploadIcon: '@/assets/上传.png'\n    };\n  },\n  methods: {\n    async handleSearch() {\n      // 如果正在加载中，则不执行新的搜索操作\n      if (this.loading) {\n        return;\n      }\n      const keyword = this.queryKeyword;\n      this.loading = true;\n      try {\n        let zxakey = \"zxa\";\n        // 初始化一个用于 SSE 的 message 对象\n        let sseMessage = {\n          orgcontent: '',\n          content: '',\n          sender: 'friend',\n          zxakey: zxakey\n        };\n        this.messages.push({\n          content: keyword,\n          sender: 'user'\n        });\n        this.$nextTick(() => {\n          this.scrollToBottom();\n        });\n        let friendMessage = sseMessage;\n        // 创建一个新的 EventSource 实例\n        this.eventSource = new EventSource('http://10.176.168.151:5000/llm/request?query=' + keyword);\n        // 设置消息事件监听器\n        this.eventSource.onmessage = event => {\n          try {\n            const dataObject = JSON.parse(event.data);\n            // 判断是否为最后一个消息，如果是，则关闭事件源\n            if (dataObject.message === 'done') {\n              this.eventSource.close();\n              this.loading = false;\n            }\n            if (dataObject.message != 'done') {\n              // 累加接收到的数据到 friendMessage.orgcontent 中\n              friendMessage.orgcontent += dataObject.message.toLocaleString();\n              friendMessage.orgcontent = friendMessage.orgcontent.replace(/\\*\\*\\s*([^*]*?)\\s*(:\\s*)?\\*\\*/g, '**$1$2**');\n              // 更新 friendMessage.content，这里假设 md.render 可以处理累加的字符串\n              friendMessage.content = this.md.render(friendMessage.orgcontent);\n            }\n            this.scrollToBottom();\n          } catch (e) {\n            console.error('Error parsing JSON:', e);\n          }\n        };\n        this.messages.push(sseMessage);\n        this.queryKeyword = ''; // 清空输入框\n        this.eventSource.onerror = error => {\n          console.error('EventSource failed:', error);\n          this.eventSource.close();\n        };\n      } catch (error) {\n        console.error('发送消息时出错：', error);\n      } finally {}\n    },\n    closeEventSource() {\n      this.loading = false;\n      if (this.eventSource) {\n        this.eventSource.close();\n      }\n    },\n    scrollToBottom() {\n      const messageContainer = this.$refs.messageContainer;\n      if (messageContainer) {\n        messageContainer.scrollTop = messageContainer.scrollHeight;\n      }\n    },\n    beforeDestroy() {\n      if (this.eventSource) {\n        this.eventSource.close();\n      }\n    }\n  }\n};","map":{"version":3,"names":["MarkdownIt","markdownItFootnote","markdownItTaskLists","markdownItAbbr","markdownItContainer","hljs","markdownItHighlightjs","name","components","computed","html","md","render","message","data","use","enabled","queryKeyword","tempResult","loading","messages","socket","eventSource","stopIcon","uploadIcon","methods","handleSearch","keyword","zxakey","sseMessage","orgcontent","content","sender","push","$nextTick","scrollToBottom","friendMessage","EventSource","onmessage","event","dataObject","JSON","parse","close","toLocaleString","replace","e","console","error","onerror","closeEventSource","messageContainer","$refs","scrollTop","scrollHeight","beforeDestroy"],"sources":["src/views/HomeView.vue"],"sourcesContent":["<template>\r\n  <div class=\"home\">\r\n    <div class=\"home-right\">\r\n      <div class=\"right-version\">\r\n        <div class=\"llm-chat-demo\">\r\n          <span class=\"chat-demo\">Chat Demo</span><span class=\"version\"> V1</span>\r\n        </div>\r\n      </div>\r\n      <div class=\"right-body\" :class=\"messages.length === 0 ? 'nodata' : ''\" ref=\"messageContainer\">\r\n        <div v-for=\"(message, index) in messages\" class=\"main-message\" :key=\"index\"\r\n             :class=\"{'user-message': message.sender === 'user', 'friend-message': message.sender === 'friend'}\">\r\n          <!-- 显示用户标识和图片 -->\r\n          <div class=\"message-sender\"\r\n               :class=\"{'user-message': message.sender === 'user', 'friend-message': message.sender === 'friend'}\">\r\n            <img v-if=\"message.sender === 'user'\" src=\"@/assets/我的.png\" alt=\"User Icon\">\r\n            <img v-else-if=\"message.sender === 'friend'\" src=\"@/assets/我的2.png\" alt=\"Friend Icon\">\r\n            <span class=\"message-sender-name\"\r\n                  :class=\"message.sender === 'user' ? 'user-color' : 'friend-color'\">{{ message.sender }}:</span>\r\n          </div>\r\n          <div v-if=\"message.sender === 'user'\" class=\"user-message\">{{ message.content }}</div>\r\n          <div v-else class=\"friend-message\" v-html=\"message.content\"></div>\r\n        </div>\r\n      </div>\r\n      <div class=\"right-input\" @keyup.enter=\"handleSearch\">\r\n        <!-- 输入框 -->\r\n        <el-input v-model=\"queryKeyword\" placeholder=\"给Chat Demo发送消息\" class=\"input\"></el-input>\r\n        <!-- 查询按钮 -->\r\n        <el-button v-if=\"!loading\" type=\"primary\" @click=\"handleSearch\">\r\n          <img  class=\"up-load\" src=\"@/assets/上传.png\">\r\n        </el-button>\r\n        <el-button v-if=\"loading\" type=\"primary\" @click=\"closeEventSource\">\r\n          <img  class=\"up-load\" src=\"@/assets/等待.png\" >\r\n        </el-button>\r\n      </div>\r\n      <div class=\"sec-notice\">Chat Demo may also make mistakes. Please consider checking important information.</div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport MarkdownIt from 'markdown-it';\r\nimport markdownItFootnote from 'markdown-it-footnote';\r\nimport markdownItTaskLists from 'markdown-it-task-lists';\r\nimport markdownItAbbr from 'markdown-it-abbr';\r\nimport markdownItContainer from 'markdown-it-container';\r\nimport hljs from 'highlight.js';\r\nimport markdownItHighlightjs from 'markdown-it-highlightjs';\r\n\r\nexport default {\r\n  name: 'HomeView',\r\n  components: {},\r\n  computed: {\r\n    // 将 Markdown 文本渲染为 HTML\r\n    html() {\r\n      return this.md.render(this.message);\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      md: new MarkdownIt()\r\n          .use(markdownItFootnote)\r\n          .use(markdownItTaskLists, {enabled: true})\r\n          .use(markdownItAbbr)\r\n          .use(markdownItContainer, 'warning')\r\n          .use(markdownItHighlightjs, {hljs}), // 添加 markdown-it-highlightjs 插件\r\n      queryKeyword: '',\r\n      tempResult: {},\r\n      loading: false,\r\n      messages: [],\r\n      socket: null,\r\n      eventSource: null, // 添加事件源变量\r\n      stopIcon: '@/assets/等待.png',\r\n      uploadIcon: '@/assets/上传.png'\r\n    }\r\n  },\r\n  methods: {\r\n    async handleSearch() {\r\n      // 如果正在加载中，则不执行新的搜索操作\r\n      if (this.loading) {\r\n        return;\r\n      }\r\n\r\n      const keyword = this.queryKeyword;\r\n      this.loading = true;\r\n      try {\r\n        let zxakey = \"zxa\";\r\n        // 初始化一个用于 SSE 的 message 对象\r\n        let sseMessage = {\r\n          orgcontent: '',\r\n          content: '',\r\n          sender: 'friend',\r\n          zxakey: zxakey\r\n        };\r\n\r\n        this.messages.push({\r\n          content: keyword,\r\n          sender: 'user'\r\n        });\r\n\r\n        this.$nextTick(() => {\r\n          this.scrollToBottom();\r\n        });\r\n\r\n        let friendMessage = sseMessage;\r\n        // 创建一个新的 EventSource 实例\r\n        this.eventSource = new EventSource('http://10.176.168.151:5000/llm/request?query=' + keyword);\r\n        // 设置消息事件监听器\r\n        this.eventSource.onmessage = (event) => {\r\n          try {\r\n            const dataObject = JSON.parse(event.data);\r\n            // 判断是否为最后一个消息，如果是，则关闭事件源\r\n            if (dataObject.message === 'done') {\r\n              this.eventSource.close();\r\n              this.loading = false;\r\n            }\r\n            if (dataObject.message != 'done') {\r\n              // 累加接收到的数据到 friendMessage.orgcontent 中\r\n              friendMessage.orgcontent += dataObject.message.toLocaleString();\r\n              friendMessage.orgcontent = friendMessage.orgcontent.replace(/\\*\\*\\s*([^*]*?)\\s*(:\\s*)?\\*\\*/g, '**$1$2**');\r\n              // 更新 friendMessage.content，这里假设 md.render 可以处理累加的字符串\r\n              friendMessage.content = this.md.render(friendMessage.orgcontent);\r\n            }\r\n            this.scrollToBottom();\r\n          } catch (e) {\r\n            console.error('Error parsing JSON:', e);\r\n          }\r\n        };\r\n        this.messages.push(sseMessage);\r\n        this.queryKeyword = ''; // 清空输入框\r\n        this.eventSource.onerror = error => {\r\n          console.error('EventSource failed:', error);\r\n          this.eventSource.close();\r\n        };\r\n      } catch (error) {\r\n        console.error('发送消息时出错：', error);\r\n      } finally {\r\n      }\r\n    },\r\n    closeEventSource() {\r\n      this.loading = false;\r\n      if (this.eventSource) {\r\n        this.eventSource.close();\r\n      }\r\n    },\r\n    scrollToBottom() {\r\n      const messageContainer = this.$refs.messageContainer;\r\n      if (messageContainer) {\r\n        messageContainer.scrollTop = messageContainer.scrollHeight;\r\n      }\r\n    },\r\n    beforeDestroy() {\r\n      if (this.eventSource) {\r\n        this.eventSource.close();\r\n      }\r\n    }\r\n  },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.home {\r\n  height: 100%;\r\n  display: flex;\r\n}\r\n\r\n.home-right {\r\n  width: 100%;\r\n}\r\n\r\n.right-version {\r\n  //width: 60%;\r\n  margin: auto;\r\n  //background-color: #F9FFD8;\r\n  height: 5%;\r\n  display: flex;\r\n  justify-content: start;\r\n  align-items: center;\r\n  border-radius: 15px;\r\n  margin-bottom: 12px;\r\n}\r\n\r\n.version {\r\n  color: rgb(155, 155, 155);\r\n}\r\n\r\n.llm-chat-demo {\r\n  width: 58%;\r\n  margin: auto;\r\n  //margin-left: 20px;\r\n  //font-family: \"黑体\", \"SimHei\", sans-serif;\r\n  font-family: Söhne, ui-sans-serif, system;\r\n  font-variation-settings: normal;\r\n  font-weight: 550;\r\n  font-size: 18px;\r\n  cursor: pointer;\r\n  color-scheme: light;\r\n}\r\n\r\n.chat-demo {\r\n  opacity: 0.65; /* 设置透明度为 0.7，您可以根据需要调整这个值 */\r\n}\r\n\r\n.right-body {\r\n  height: 85%;\r\n  overflow-y: auto;\r\n}\r\n\r\n.user-color {\r\n  color: #1296db;\r\n}\r\n\r\n.friend-color {\r\n  color: #77FC5D;\r\n}\r\n.nodata {\r\n  background-image: url(\"@/assets/happy.png\");\r\n  background-repeat: no-repeat;\r\n  background-size: 35%;\r\n  background-position: center 50%;\r\n}\r\n\r\n.main-message {\r\n  margin: auto;\r\n  width: 58%;\r\n  justify-content: center;\r\n}\r\n\r\n.message-sender-name {\r\n  margin-left: 10px;\r\n  //font-family: \"黑体\", \"SimHei\", sans-serif;\r\n  font-family: Söhne, ui-sans-serif, system;\r\n  font-weight: 550;\r\n  font-size: 18px;\r\n}\r\n\r\n.right-input {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 6.5%;\r\n\r\n  position: relative;\r\n}\r\n\r\n.sec-notice {\r\n  height: 3.5%;\r\n  font-size: 12px;\r\n  font-family: Söhne, ui-sans-serif;\r\n  color: rgb(155, 155, 155);\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n.input {\r\n  width: 58%;\r\n  margin-right: 5px;\r\n}\r\n\r\n.up-load {\r\n  //width: 30px;\r\n}\r\n\r\n::v-deep .el-button {\r\n  padding: 5px 6px;\r\n}\r\n\r\n::v-deep .el-input__inner {\r\n  height: 52px;\r\n  border-radius: 15px;\r\n  border: 1px solid #DCDFE6;\r\n}\r\n\r\n::v-deep .el-button--primary {\r\n  position: relative;\r\n  right: 3.5%;\r\n  background-color: rgba(180, 180, 180, 0.3) !important;\r\n  color: black !important;\r\n  border-color: rgba(180, 180, 180, 0.3) !important;\r\n}\r\n\r\n.user-message {\r\n  text-align: left;\r\n  padding: 5px;\r\n  margin-bottom: 5px;\r\n  border-radius: 15px;\r\n\r\n}\r\n\r\n.friend-message {\r\n  background-color: rgba(227, 255, 255, 0.2); /* 这里的 0.5 是透明度，你可以根据需要调整 */\r\n  text-align: left;\r\n  padding: 5px;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n::v-deep .friend-message pre .hljs {\r\n  border-radius: 10px !important; /* 圆角 */\r\n  background-color: #FAF7F7; /* 例子中的背景色 */\r\n}\r\n\r\n/* 设置滚动条的样式 */\r\n::-webkit-scrollbar {\r\n  width: 6px; /* 设置滚动条宽度 */\r\n}\r\n\r\n/* 设置滚动条轨道的样式 */\r\n::-webkit-scrollbar-track {\r\n  background: #f1f1f1; /* 设置滚动条轨道的背景色 */\r\n}\r\n\r\n/* 设置滚动条滑块的样式 */\r\n::-webkit-scrollbar-thumb {\r\n  background: #888; /* 设置滚动条滑块的背景色 */\r\n  border-radius: 3px; /* 设置滚动条滑块的圆角 */\r\n}\r\n\r\n/* 鼠标悬停时滚动条滑块的样式 */\r\n::-webkit-scrollbar-thumb:hover {\r\n  background: #555; /* 设置鼠标悬停时滚动条滑块的背景色 */\r\n}\r\n</style>\r\n"],"mappings":";AAwCA,OAAAA,UAAA;AACA,OAAAC,kBAAA;AACA,OAAAC,mBAAA;AACA,OAAAC,cAAA;AACA,OAAAC,mBAAA;AACA,OAAAC,IAAA;AACA,OAAAC,qBAAA;AAEA;EACAC,IAAA;EACAC,UAAA;EACAC,QAAA;IACA;IACAC,KAAA;MACA,YAAAC,EAAA,CAAAC,MAAA,MAAAC,OAAA;IACA;EACA;EACAC,KAAA;IACA;MACAH,EAAA,MAAAX,UAAA,GACAe,GAAA,CAAAd,kBAAA,EACAc,GAAA,CAAAb,mBAAA;QAAAc,OAAA;MAAA,GACAD,GAAA,CAAAZ,cAAA,EACAY,GAAA,CAAAX,mBAAA,aACAW,GAAA,CAAAT,qBAAA;QAAAD;MAAA;MAAA;MACAY,YAAA;MACAC,UAAA;MACAC,OAAA;MACAC,QAAA;MACAC,MAAA;MACAC,WAAA;MAAA;MACAC,QAAA;MACAC,UAAA;IACA;EACA;EACAC,OAAA;IACA,MAAAC,aAAA;MACA;MACA,SAAAP,OAAA;QACA;MACA;MAEA,MAAAQ,OAAA,QAAAV,YAAA;MACA,KAAAE,OAAA;MACA;QACA,IAAAS,MAAA;QACA;QACA,IAAAC,UAAA;UACAC,UAAA;UACAC,OAAA;UACAC,MAAA;UACAJ,MAAA,EAAAA;QACA;QAEA,KAAAR,QAAA,CAAAa,IAAA;UACAF,OAAA,EAAAJ,OAAA;UACAK,MAAA;QACA;QAEA,KAAAE,SAAA;UACA,KAAAC,cAAA;QACA;QAEA,IAAAC,aAAA,GAAAP,UAAA;QACA;QACA,KAAAP,WAAA,OAAAe,WAAA,mDAAAV,OAAA;QACA;QACA,KAAAL,WAAA,CAAAgB,SAAA,GAAAC,KAAA;UACA;YACA,MAAAC,UAAA,GAAAC,IAAA,CAAAC,KAAA,CAAAH,KAAA,CAAAzB,IAAA;YACA;YACA,IAAA0B,UAAA,CAAA3B,OAAA;cACA,KAAAS,WAAA,CAAAqB,KAAA;cACA,KAAAxB,OAAA;YACA;YACA,IAAAqB,UAAA,CAAA3B,OAAA;cACA;cACAuB,aAAA,CAAAN,UAAA,IAAAU,UAAA,CAAA3B,OAAA,CAAA+B,cAAA;cACAR,aAAA,CAAAN,UAAA,GAAAM,aAAA,CAAAN,UAAA,CAAAe,OAAA;cACA;cACAT,aAAA,CAAAL,OAAA,QAAApB,EAAA,CAAAC,MAAA,CAAAwB,aAAA,CAAAN,UAAA;YACA;YACA,KAAAK,cAAA;UACA,SAAAW,CAAA;YACAC,OAAA,CAAAC,KAAA,wBAAAF,CAAA;UACA;QACA;QACA,KAAA1B,QAAA,CAAAa,IAAA,CAAAJ,UAAA;QACA,KAAAZ,YAAA;QACA,KAAAK,WAAA,CAAA2B,OAAA,GAAAD,KAAA;UACAD,OAAA,CAAAC,KAAA,wBAAAA,KAAA;UACA,KAAA1B,WAAA,CAAAqB,KAAA;QACA;MACA,SAAAK,KAAA;QACAD,OAAA,CAAAC,KAAA,aAAAA,KAAA;MACA,WACA;IACA;IACAE,iBAAA;MACA,KAAA/B,OAAA;MACA,SAAAG,WAAA;QACA,KAAAA,WAAA,CAAAqB,KAAA;MACA;IACA;IACAR,eAAA;MACA,MAAAgB,gBAAA,QAAAC,KAAA,CAAAD,gBAAA;MACA,IAAAA,gBAAA;QACAA,gBAAA,CAAAE,SAAA,GAAAF,gBAAA,CAAAG,YAAA;MACA;IACA;IACAC,cAAA;MACA,SAAAjC,WAAA;QACA,KAAAA,WAAA,CAAAqB,KAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}