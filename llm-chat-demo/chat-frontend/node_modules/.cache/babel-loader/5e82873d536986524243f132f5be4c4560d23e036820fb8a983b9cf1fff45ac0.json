{"ast":null,"code":"import htmlTrie from \"./generated/encode-html.js\";\nimport { xmlReplacer, getCodePoint } from \"./escape.js\";\nconst htmlReplacer = /[\\t\\n!-,./:-@[-`\\f{-}$\\x80-\\uFFFF]/g;\n/**\n * Encodes all characters in the input using HTML entities. This includes\n * characters that are valid ASCII characters in HTML documents, such as `#`.\n *\n * To get a more compact output, consider using the `encodeNonAsciiHTML`\n * function, which will only encode characters that are not valid in HTML\n * documents, as well as non-ASCII characters.\n *\n * If a character has no equivalent entity, a numeric hexadecimal reference\n * (eg. `&#xfc;`) will be used.\n */\nexport function encodeHTML(data) {\n  return encodeHTMLTrieRe(htmlReplacer, data);\n}\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in HTML\n * documents using HTML entities. This function will not encode characters that\n * are valid in HTML documents, such as `#`.\n *\n * If a character has no equivalent entity, a numeric hexadecimal reference\n * (eg. `&#xfc;`) will be used.\n */\nexport function encodeNonAsciiHTML(data) {\n  return encodeHTMLTrieRe(xmlReplacer, data);\n}\nfunction encodeHTMLTrieRe(regExp, str) {\n  let ret = \"\";\n  let lastIdx = 0;\n  let match;\n  while ((match = regExp.exec(str)) !== null) {\n    const i = match.index;\n    ret += str.substring(lastIdx, i);\n    const char = str.charCodeAt(i);\n    let next = htmlTrie.get(char);\n    if (typeof next === \"object\") {\n      // We are in a branch. Try to match the next char.\n      if (i + 1 < str.length) {\n        const nextChar = str.charCodeAt(i + 1);\n        const value = typeof next.n === \"number\" ? next.n === nextChar ? next.o : undefined : next.n.get(nextChar);\n        if (value !== undefined) {\n          ret += value;\n          lastIdx = regExp.lastIndex += 1;\n          continue;\n        }\n      }\n      next = next.v;\n    }\n    // We might have a tree node without a value; skip and use a numeric entity.\n    if (next !== undefined) {\n      ret += next;\n      lastIdx = i + 1;\n    } else {\n      const cp = getCodePoint(str, i);\n      ret += `&#x${cp.toString(16)};`;\n      // Increase by 1 if we have a surrogate pair\n      lastIdx = regExp.lastIndex += Number(cp !== char);\n    }\n  }\n  return ret + str.substr(lastIdx);\n}","map":{"version":3,"names":["htmlTrie","xmlReplacer","getCodePoint","htmlReplacer","encodeHTML","data","encodeHTMLTrieRe","encodeNonAsciiHTML","regExp","str","ret","lastIdx","match","exec","i","index","substring","char","charCodeAt","next","get","length","nextChar","value","n","o","undefined","lastIndex","v","cp","toString","Number","substr"],"sources":["https://raw.githubusercontent.com/fb55/entities/61afd4701eaa736978b13c7351cd3de9a96b04bc/src/encode.ts"],"sourcesContent":[null],"mappings":"AAAA,OAAOA,QAAQ,MAAM,4BAA4B;AACjD,SAASC,WAAW,EAAEC,YAAY,QAAQ,aAAa;AAEvD,MAAMC,YAAY,GAAG,qCAAqC;AAE1D;;;;;;;;;;;AAWA,OAAM,SAAUC,UAAUA,CAACC,IAAY;EACnC,OAAOC,gBAAgB,CAACH,YAAY,EAAEE,IAAI,CAAC;AAC/C;AACA;;;;;;;;AAQA,OAAM,SAAUE,kBAAkBA,CAACF,IAAY;EAC3C,OAAOC,gBAAgB,CAACL,WAAW,EAAEI,IAAI,CAAC;AAC9C;AAEA,SAASC,gBAAgBA,CAACE,MAAc,EAAEC,GAAW;EACjD,IAAIC,GAAG,GAAG,EAAE;EACZ,IAAIC,OAAO,GAAG,CAAC;EACf,IAAIC,KAAK;EAET,OAAO,CAACA,KAAK,GAAGJ,MAAM,CAACK,IAAI,CAACJ,GAAG,CAAC,MAAM,IAAI,EAAE;IACxC,MAAMK,CAAC,GAAGF,KAAK,CAACG,KAAK;IACrBL,GAAG,IAAID,GAAG,CAACO,SAAS,CAACL,OAAO,EAAEG,CAAC,CAAC;IAChC,MAAMG,IAAI,GAAGR,GAAG,CAACS,UAAU,CAACJ,CAAC,CAAC;IAC9B,IAAIK,IAAI,GAAGnB,QAAQ,CAACoB,GAAG,CAACH,IAAI,CAAC;IAE7B,IAAI,OAAOE,IAAI,KAAK,QAAQ,EAAE;MAC1B;MACA,IAAIL,CAAC,GAAG,CAAC,GAAGL,GAAG,CAACY,MAAM,EAAE;QACpB,MAAMC,QAAQ,GAAGb,GAAG,CAACS,UAAU,CAACJ,CAAC,GAAG,CAAC,CAAC;QACtC,MAAMS,KAAK,GACP,OAAOJ,IAAI,CAACK,CAAC,KAAK,QAAQ,GACpBL,IAAI,CAACK,CAAC,KAAKF,QAAQ,GACfH,IAAI,CAACM,CAAC,GACNC,SAAS,GACbP,IAAI,CAACK,CAAC,CAACJ,GAAG,CAACE,QAAQ,CAAC;QAE9B,IAAIC,KAAK,KAAKG,SAAS,EAAE;UACrBhB,GAAG,IAAIa,KAAK;UACZZ,OAAO,GAAGH,MAAM,CAACmB,SAAS,IAAI,CAAC;UAC/B;;;MAIRR,IAAI,GAAGA,IAAI,CAACS,CAAC;;IAGjB;IACA,IAAIT,IAAI,KAAKO,SAAS,EAAE;MACpBhB,GAAG,IAAIS,IAAI;MACXR,OAAO,GAAGG,CAAC,GAAG,CAAC;KAClB,MAAM;MACH,MAAMe,EAAE,GAAG3B,YAAY,CAACO,GAAG,EAAEK,CAAC,CAAC;MAC/BJ,GAAG,IAAI,MAAMmB,EAAE,CAACC,QAAQ,CAAC,EAAE,CAAC,GAAG;MAC/B;MACAnB,OAAO,GAAGH,MAAM,CAACmB,SAAS,IAAII,MAAM,CAACF,EAAE,KAAKZ,IAAI,CAAC;;;EAIzD,OAAOP,GAAG,GAAGD,GAAG,CAACuB,MAAM,CAACrB,OAAO,CAAC;AACpC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}