{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// Process escaped chars and hardbreaks\n\nimport { isSpace } from '../common/utils.mjs';\nconst ESCAPED = [];\nfor (let i = 0; i < 256; i++) {\n  ESCAPED.push(0);\n}\n'\\\\!\"#$%&\\'()*+,./:;<=>?@[]^_`{|}~-'.split('').forEach(function (ch) {\n  ESCAPED[ch.charCodeAt(0)] = 1;\n});\nexport default function escape(state, silent) {\n  let pos = state.pos;\n  const max = state.posMax;\n  if (state.src.charCodeAt(pos) !== 0x5C /* \\ */) return false;\n  pos++;\n\n  // '\\' at the end of the inline block\n  if (pos >= max) return false;\n  let ch1 = state.src.charCodeAt(pos);\n  if (ch1 === 0x0A) {\n    if (!silent) {\n      state.push('hardbreak', 'br', 0);\n    }\n    pos++;\n    // skip leading whitespaces from next line\n    while (pos < max) {\n      ch1 = state.src.charCodeAt(pos);\n      if (!isSpace(ch1)) break;\n      pos++;\n    }\n    state.pos = pos;\n    return true;\n  }\n  let escapedStr = state.src[pos];\n  if (ch1 >= 0xD800 && ch1 <= 0xDBFF && pos + 1 < max) {\n    const ch2 = state.src.charCodeAt(pos + 1);\n    if (ch2 >= 0xDC00 && ch2 <= 0xDFFF) {\n      escapedStr += state.src[pos + 1];\n      pos++;\n    }\n  }\n  const origStr = '\\\\' + escapedStr;\n  if (!silent) {\n    const token = state.push('text_special', '', 0);\n    if (ch1 < 256 && ESCAPED[ch1] !== 0) {\n      token.content = escapedStr;\n    } else {\n      token.content = origStr;\n    }\n    token.markup = origStr;\n    token.info = 'escape';\n  }\n  state.pos = pos + 1;\n  return true;\n}","map":{"version":3,"names":["isSpace","ESCAPED","i","push","split","forEach","ch","charCodeAt","escape","state","silent","pos","max","posMax","src","ch1","escapedStr","ch2","origStr","token","content","markup","info"],"sources":["E:/GLM-UML/llm-chat-demo/chat-frontend/node_modules/markdown-it/lib/rules_inline/escape.mjs"],"sourcesContent":["// Process escaped chars and hardbreaks\n\nimport { isSpace } from '../common/utils.mjs'\n\nconst ESCAPED = []\n\nfor (let i = 0; i < 256; i++) { ESCAPED.push(0) }\n\n'\\\\!\"#$%&\\'()*+,./:;<=>?@[]^_`{|}~-'\n  .split('').forEach(function (ch) { ESCAPED[ch.charCodeAt(0)] = 1 })\n\nexport default function escape (state, silent) {\n  let pos = state.pos\n  const max = state.posMax\n\n  if (state.src.charCodeAt(pos) !== 0x5C/* \\ */) return false\n  pos++\n\n  // '\\' at the end of the inline block\n  if (pos >= max) return false\n\n  let ch1 = state.src.charCodeAt(pos)\n\n  if (ch1 === 0x0A) {\n    if (!silent) {\n      state.push('hardbreak', 'br', 0)\n    }\n\n    pos++\n    // skip leading whitespaces from next line\n    while (pos < max) {\n      ch1 = state.src.charCodeAt(pos)\n      if (!isSpace(ch1)) break\n      pos++\n    }\n\n    state.pos = pos\n    return true\n  }\n\n  let escapedStr = state.src[pos]\n\n  if (ch1 >= 0xD800 && ch1 <= 0xDBFF && pos + 1 < max) {\n    const ch2 = state.src.charCodeAt(pos + 1)\n\n    if (ch2 >= 0xDC00 && ch2 <= 0xDFFF) {\n      escapedStr += state.src[pos + 1]\n      pos++\n    }\n  }\n\n  const origStr = '\\\\' + escapedStr\n\n  if (!silent) {\n    const token = state.push('text_special', '', 0)\n\n    if (ch1 < 256 && ESCAPED[ch1] !== 0) {\n      token.content = escapedStr\n    } else {\n      token.content = origStr\n    }\n\n    token.markup = origStr\n    token.info   = 'escape'\n  }\n\n  state.pos = pos + 1\n  return true\n}\n"],"mappings":";AAAA;;AAEA,SAASA,OAAO,QAAQ,qBAAqB;AAE7C,MAAMC,OAAO,GAAG,EAAE;AAElB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,GAAG,EAAEA,CAAC,EAAE,EAAE;EAAED,OAAO,CAACE,IAAI,CAAC,CAAC,CAAC;AAAC;AAEhD,oCAAoC,CACjCC,KAAK,CAAC,EAAE,CAAC,CAACC,OAAO,CAAC,UAAUC,EAAE,EAAE;EAAEL,OAAO,CAACK,EAAE,CAACC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;AAAC,CAAC,CAAC;AAErE,eAAe,SAASC,MAAMA,CAAEC,KAAK,EAAEC,MAAM,EAAE;EAC7C,IAAIC,GAAG,GAAGF,KAAK,CAACE,GAAG;EACnB,MAAMC,GAAG,GAAGH,KAAK,CAACI,MAAM;EAExB,IAAIJ,KAAK,CAACK,GAAG,CAACP,UAAU,CAACI,GAAG,CAAC,KAAK,IAAI,UAAS,OAAO,KAAK;EAC3DA,GAAG,EAAE;;EAEL;EACA,IAAIA,GAAG,IAAIC,GAAG,EAAE,OAAO,KAAK;EAE5B,IAAIG,GAAG,GAAGN,KAAK,CAACK,GAAG,CAACP,UAAU,CAACI,GAAG,CAAC;EAEnC,IAAII,GAAG,KAAK,IAAI,EAAE;IAChB,IAAI,CAACL,MAAM,EAAE;MACXD,KAAK,CAACN,IAAI,CAAC,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC;IAClC;IAEAQ,GAAG,EAAE;IACL;IACA,OAAOA,GAAG,GAAGC,GAAG,EAAE;MAChBG,GAAG,GAAGN,KAAK,CAACK,GAAG,CAACP,UAAU,CAACI,GAAG,CAAC;MAC/B,IAAI,CAACX,OAAO,CAACe,GAAG,CAAC,EAAE;MACnBJ,GAAG,EAAE;IACP;IAEAF,KAAK,CAACE,GAAG,GAAGA,GAAG;IACf,OAAO,IAAI;EACb;EAEA,IAAIK,UAAU,GAAGP,KAAK,CAACK,GAAG,CAACH,GAAG,CAAC;EAE/B,IAAII,GAAG,IAAI,MAAM,IAAIA,GAAG,IAAI,MAAM,IAAIJ,GAAG,GAAG,CAAC,GAAGC,GAAG,EAAE;IACnD,MAAMK,GAAG,GAAGR,KAAK,CAACK,GAAG,CAACP,UAAU,CAACI,GAAG,GAAG,CAAC,CAAC;IAEzC,IAAIM,GAAG,IAAI,MAAM,IAAIA,GAAG,IAAI,MAAM,EAAE;MAClCD,UAAU,IAAIP,KAAK,CAACK,GAAG,CAACH,GAAG,GAAG,CAAC,CAAC;MAChCA,GAAG,EAAE;IACP;EACF;EAEA,MAAMO,OAAO,GAAG,IAAI,GAAGF,UAAU;EAEjC,IAAI,CAACN,MAAM,EAAE;IACX,MAAMS,KAAK,GAAGV,KAAK,CAACN,IAAI,CAAC,cAAc,EAAE,EAAE,EAAE,CAAC,CAAC;IAE/C,IAAIY,GAAG,GAAG,GAAG,IAAId,OAAO,CAACc,GAAG,CAAC,KAAK,CAAC,EAAE;MACnCI,KAAK,CAACC,OAAO,GAAGJ,UAAU;IAC5B,CAAC,MAAM;MACLG,KAAK,CAACC,OAAO,GAAGF,OAAO;IACzB;IAEAC,KAAK,CAACE,MAAM,GAAGH,OAAO;IACtBC,KAAK,CAACG,IAAI,GAAK,QAAQ;EACzB;EAEAb,KAAK,CAACE,GAAG,GAAGA,GAAG,GAAG,CAAC;EACnB,OAAO,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}