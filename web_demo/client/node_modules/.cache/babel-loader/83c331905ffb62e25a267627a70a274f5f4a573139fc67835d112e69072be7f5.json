{"ast":null,"code":"/*\nLanguage: Stan\nDescription: The Stan probabilistic programming language\nAuthor: Sean Pinkney <sean.pinkney@gmail.com>\nWebsite: http://mc-stan.org/\nCategory: scientific\n*/\n\nfunction stan(hljs) {\n  const regex = hljs.regex;\n  // variable names cannot conflict with block identifiers\n  const BLOCKS = ['functions', 'model', 'data', 'parameters', 'quantities', 'transformed', 'generated'];\n  const STATEMENTS = ['for', 'in', 'if', 'else', 'while', 'break', 'continue', 'return'];\n  const TYPES = ['array', 'tuple', 'complex', 'int', 'real', 'vector', 'complex_vector', 'ordered', 'positive_ordered', 'simplex', 'unit_vector', 'row_vector', 'complex_row_vector', 'matrix', 'complex_matrix', 'cholesky_factor_corr|10', 'cholesky_factor_cov|10', 'corr_matrix|10', 'cov_matrix|10', 'void'];\n\n  // to get the functions list\n  // clone the [stan-docs repo](https://github.com/stan-dev/docs)\n  // then cd into it and run this bash script https://gist.github.com/joshgoebel/dcd33f82d4059a907c986049893843cf\n  //\n  // the output files are\n  // distributions_quoted.txt\n  // functions_quoted.txt\n\n  const FUNCTIONS = ['abs', 'acos', 'acosh', 'add_diag', 'algebra_solver', 'algebra_solver_newton', 'append_array', 'append_col', 'append_row', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'bessel_first_kind', 'bessel_second_kind', 'binary_log_loss', 'block', 'cbrt', 'ceil', 'chol2inv', 'cholesky_decompose', 'choose', 'col', 'cols', 'columns_dot_product', 'columns_dot_self', 'complex_schur_decompose', 'complex_schur_decompose_t', 'complex_schur_decompose_u', 'conj', 'cos', 'cosh', 'cov_exp_quad', 'crossprod', 'csr_extract', 'csr_extract_u', 'csr_extract_v', 'csr_extract_w', 'csr_matrix_times_vector', 'csr_to_dense_matrix', 'cumulative_sum', 'dae', 'dae_tol', 'determinant', 'diag_matrix', 'diagonal', 'diag_post_multiply', 'diag_pre_multiply', 'digamma', 'dims', 'distance', 'dot_product', 'dot_self', 'eigendecompose', 'eigendecompose_sym', 'eigenvalues', 'eigenvalues_sym', 'eigenvectors', 'eigenvectors_sym', 'erf', 'erfc', 'exp', 'exp2', 'expm1', 'falling_factorial', 'fdim', 'fft', 'fft2', 'floor', 'fma', 'fmax', 'fmin', 'fmod', 'gamma_p', 'gamma_q', 'generalized_inverse', 'get_imag', 'get_real', 'head', 'hmm_hidden_state_prob', 'hmm_marginal', 'hypot', 'identity_matrix', 'inc_beta', 'integrate_1d', 'integrate_ode', 'integrate_ode_adams', 'integrate_ode_bdf', 'integrate_ode_rk45', 'int_step', 'inv', 'inv_cloglog', 'inv_erfc', 'inverse', 'inverse_spd', 'inv_fft', 'inv_fft2', 'inv_inc_beta', 'inv_logit', 'inv_Phi', 'inv_sqrt', 'inv_square', 'is_inf', 'is_nan', 'lambert_w0', 'lambert_wm1', 'lbeta', 'lchoose', 'ldexp', 'lgamma', 'linspaced_array', 'linspaced_int_array', 'linspaced_row_vector', 'linspaced_vector', 'lmgamma', 'lmultiply', 'log', 'log1m', 'log1m_exp', 'log1m_inv_logit', 'log1p', 'log1p_exp', 'log_determinant', 'log_diff_exp', 'log_falling_factorial', 'log_inv_logit', 'log_inv_logit_diff', 'logit', 'log_mix', 'log_modified_bessel_first_kind', 'log_rising_factorial', 'log_softmax', 'log_sum_exp', 'machine_precision', 'map_rect', 'matrix_exp', 'matrix_exp_multiply', 'matrix_power', 'max', 'mdivide_left_spd', 'mdivide_left_tri_low', 'mdivide_right_spd', 'mdivide_right_tri_low', 'mean', 'min', 'modified_bessel_first_kind', 'modified_bessel_second_kind', 'multiply_lower_tri_self_transpose', 'negative_infinity', 'norm', 'norm1', 'norm2', 'not_a_number', 'num_elements', 'ode_adams', 'ode_adams_tol', 'ode_adjoint_tol_ctl', 'ode_bdf', 'ode_bdf_tol', 'ode_ckrk', 'ode_ckrk_tol', 'ode_rk45', 'ode_rk45_tol', 'one_hot_array', 'one_hot_int_array', 'one_hot_row_vector', 'one_hot_vector', 'ones_array', 'ones_int_array', 'ones_row_vector', 'ones_vector', 'owens_t', 'Phi', 'Phi_approx', 'polar', 'positive_infinity', 'pow', 'print', 'prod', 'proj', 'qr', 'qr_Q', 'qr_R', 'qr_thin', 'qr_thin_Q', 'qr_thin_R', 'quad_form', 'quad_form_diag', 'quad_form_sym', 'quantile', 'rank', 'reduce_sum', 'reject', 'rep_array', 'rep_matrix', 'rep_row_vector', 'rep_vector', 'reverse', 'rising_factorial', 'round', 'row', 'rows', 'rows_dot_product', 'rows_dot_self', 'scale_matrix_exp_multiply', 'sd', 'segment', 'sin', 'singular_values', 'sinh', 'size', 'softmax', 'sort_asc', 'sort_desc', 'sort_indices_asc', 'sort_indices_desc', 'sqrt', 'square', 'squared_distance', 'step', 'sub_col', 'sub_row', 'sum', 'svd', 'svd_U', 'svd_V', 'symmetrize_from_lower_tri', 'tail', 'tan', 'tanh', 'target', 'tcrossprod', 'tgamma', 'to_array_1d', 'to_array_2d', 'to_complex', 'to_int', 'to_matrix', 'to_row_vector', 'to_vector', 'trace', 'trace_gen_quad_form', 'trace_quad_form', 'trigamma', 'trunc', 'uniform_simplex', 'variance', 'zeros_array', 'zeros_int_array', 'zeros_row_vector'];\n  const DISTRIBUTIONS = ['bernoulli', 'bernoulli_logit', 'bernoulli_logit_glm', 'beta', 'beta_binomial', 'beta_proportion', 'binomial', 'binomial_logit', 'categorical', 'categorical_logit', 'categorical_logit_glm', 'cauchy', 'chi_square', 'dirichlet', 'discrete_range', 'double_exponential', 'exp_mod_normal', 'exponential', 'frechet', 'gamma', 'gaussian_dlm_obs', 'gumbel', 'hmm_latent', 'hypergeometric', 'inv_chi_square', 'inv_gamma', 'inv_wishart', 'inv_wishart_cholesky', 'lkj_corr', 'lkj_corr_cholesky', 'logistic', 'loglogistic', 'lognormal', 'multi_gp', 'multi_gp_cholesky', 'multinomial', 'multinomial_logit', 'multi_normal', 'multi_normal_cholesky', 'multi_normal_prec', 'multi_student_cholesky_t', 'multi_student_t', 'multi_student_t_cholesky', 'neg_binomial', 'neg_binomial_2', 'neg_binomial_2_log', 'neg_binomial_2_log_glm', 'normal', 'normal_id_glm', 'ordered_logistic', 'ordered_logistic_glm', 'ordered_probit', 'pareto', 'pareto_type_2', 'poisson', 'poisson_log', 'poisson_log_glm', 'rayleigh', 'scaled_inv_chi_square', 'skew_double_exponential', 'skew_normal', 'std_normal', 'std_normal_log', 'student_t', 'uniform', 'von_mises', 'weibull', 'wiener', 'wishart', 'wishart_cholesky'];\n  const BLOCK_COMMENT = hljs.COMMENT(/\\/\\*/, /\\*\\//, {\n    relevance: 0,\n    contains: [{\n      scope: 'doctag',\n      match: /@(return|param)/\n    }]\n  });\n  const INCLUDE = {\n    scope: 'meta',\n    begin: /#include\\b/,\n    end: /$/,\n    contains: [{\n      match: /[a-z][a-z-._]+/,\n      scope: 'string'\n    }, hljs.C_LINE_COMMENT_MODE]\n  };\n  const RANGE_CONSTRAINTS = [\"lower\", \"upper\", \"offset\", \"multiplier\"];\n  return {\n    name: 'Stan',\n    aliases: ['stanfuncs'],\n    keywords: {\n      $pattern: hljs.IDENT_RE,\n      title: BLOCKS,\n      type: TYPES,\n      keyword: STATEMENTS,\n      built_in: FUNCTIONS\n    },\n    contains: [hljs.C_LINE_COMMENT_MODE, INCLUDE, hljs.HASH_COMMENT_MODE, BLOCK_COMMENT, {\n      scope: 'built_in',\n      match: /\\s(pi|e|sqrt2|log2|log10)(?=\\()/,\n      relevance: 0\n    }, {\n      match: regex.concat(/[<,]\\s*/, regex.either(...RANGE_CONSTRAINTS), /\\s*=/),\n      keywords: RANGE_CONSTRAINTS\n    }, {\n      scope: 'keyword',\n      match: /\\btarget(?=\\s*\\+=)/\n    }, {\n      // highlights the 'T' in T[,] for only Stan language distributrions\n      match: [/~\\s*/, regex.either(...DISTRIBUTIONS), /(?:\\(\\))/, /\\s*T(?=\\s*\\[)/],\n      scope: {\n        2: \"built_in\",\n        4: \"keyword\"\n      }\n    }, {\n      // highlights distributions that end with special endings\n      scope: 'built_in',\n      keywords: DISTRIBUTIONS,\n      begin: regex.concat(/\\w*/, regex.either(...DISTRIBUTIONS), /(_lpdf|_lupdf|_lpmf|_cdf|_lcdf|_lccdf|_qf)(?=\\s*[\\(.*\\)])/)\n    }, {\n      // highlights distributions after ~\n      begin: [/~/, /\\s*/, regex.concat(regex.either(...DISTRIBUTIONS), /(?=\\s*[\\(.*\\)])/)],\n      scope: {\n        3: \"built_in\"\n      }\n    }, {\n      // highlights user defined distributions after ~\n      begin: [/~/, /\\s*\\w+(?=\\s*[\\(.*\\)])/, '(?!.*/\\b(' + regex.either(...DISTRIBUTIONS) + ')\\b)'],\n      scope: {\n        2: \"title.function\"\n      }\n    }, {\n      // highlights user defined distributions with special endings\n      scope: 'title.function',\n      begin: /\\w*(_lpdf|_lupdf|_lpmf|_cdf|_lcdf|_lccdf|_qf)(?=\\s*[\\(.*\\)])/\n    }, {\n      scope: 'number',\n      match: regex.concat(\n      // Comes from @RunDevelopment accessed 11/29/2021 at\n      // https://github.com/PrismJS/prism/blob/c53ad2e65b7193ab4f03a1797506a54bbb33d5a2/components/prism-stan.js#L56\n\n      // start of big noncapture group which\n      // 1. gets numbers that are by themselves\n      // 2. numbers that are separated by _\n      // 3. numbers that are separted by .\n      /(?:\\b\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\B\\.\\d+(?:_\\d+)*)/,\n      // grabs scientific notation\n      // grabs complex numbers with i\n      /(?:[eE][+-]?\\d+(?:_\\d+)*)?i?(?!\\w)/),\n      relevance: 0\n    }, {\n      scope: 'string',\n      begin: /\"/,\n      end: /\"/\n    }]\n  };\n}\nmodule.exports = stan;","map":{"version":3,"names":["stan","hljs","regex","BLOCKS","STATEMENTS","TYPES","FUNCTIONS","DISTRIBUTIONS","BLOCK_COMMENT","COMMENT","relevance","contains","scope","match","INCLUDE","begin","end","C_LINE_COMMENT_MODE","RANGE_CONSTRAINTS","name","aliases","keywords","$pattern","IDENT_RE","title","type","keyword","built_in","HASH_COMMENT_MODE","concat","either","module","exports"],"sources":["E:/GLM-UML/web_demo/client/node_modules/highlight.js/lib/languages/stan.js"],"sourcesContent":["/*\nLanguage: Stan\nDescription: The Stan probabilistic programming language\nAuthor: Sean Pinkney <sean.pinkney@gmail.com>\nWebsite: http://mc-stan.org/\nCategory: scientific\n*/\n\nfunction stan(hljs) {\n  const regex = hljs.regex;\n  // variable names cannot conflict with block identifiers\n  const BLOCKS = [\n    'functions',\n    'model',\n    'data',\n    'parameters',\n    'quantities',\n    'transformed',\n    'generated'\n  ];\n\n  const STATEMENTS = [\n    'for',\n    'in',\n    'if',\n    'else',\n    'while',\n    'break',\n    'continue',\n    'return'\n  ];\n\n  const TYPES = [\n    'array',\n    'tuple',\n    'complex',\n    'int',\n    'real',\n    'vector',\n    'complex_vector',\n    'ordered',\n    'positive_ordered',\n    'simplex',\n    'unit_vector',\n    'row_vector',\n    'complex_row_vector',\n    'matrix',\n    'complex_matrix',\n    'cholesky_factor_corr|10',\n    'cholesky_factor_cov|10',\n    'corr_matrix|10',\n    'cov_matrix|10',\n    'void'\n  ];\n\n  // to get the functions list\n  // clone the [stan-docs repo](https://github.com/stan-dev/docs)\n  // then cd into it and run this bash script https://gist.github.com/joshgoebel/dcd33f82d4059a907c986049893843cf\n  //\n  // the output files are\n  // distributions_quoted.txt\n  // functions_quoted.txt\n\n  const FUNCTIONS = [\n    'abs',\n    'acos',\n    'acosh',\n    'add_diag',\n    'algebra_solver',\n    'algebra_solver_newton',\n    'append_array',\n    'append_col',\n    'append_row',\n    'asin',\n    'asinh',\n    'atan',\n    'atan2',\n    'atanh',\n    'bessel_first_kind',\n    'bessel_second_kind',\n    'binary_log_loss',\n    'block',\n    'cbrt',\n    'ceil',\n    'chol2inv',\n    'cholesky_decompose',\n    'choose',\n    'col',\n    'cols',\n    'columns_dot_product',\n    'columns_dot_self',\n    'complex_schur_decompose',\n    'complex_schur_decompose_t',\n    'complex_schur_decompose_u',\n    'conj',\n    'cos',\n    'cosh',\n    'cov_exp_quad',\n    'crossprod',\n    'csr_extract',\n    'csr_extract_u',\n    'csr_extract_v',\n    'csr_extract_w',\n    'csr_matrix_times_vector',\n    'csr_to_dense_matrix',\n    'cumulative_sum',\n    'dae',\n    'dae_tol',\n    'determinant',\n    'diag_matrix',\n    'diagonal',\n    'diag_post_multiply',\n    'diag_pre_multiply',\n    'digamma',\n    'dims',\n    'distance',\n    'dot_product',\n    'dot_self',\n    'eigendecompose',\n    'eigendecompose_sym',\n    'eigenvalues',\n    'eigenvalues_sym',\n    'eigenvectors',\n    'eigenvectors_sym',\n    'erf',\n    'erfc',\n    'exp',\n    'exp2',\n    'expm1',\n    'falling_factorial',\n    'fdim',\n    'fft',\n    'fft2',\n    'floor',\n    'fma',\n    'fmax',\n    'fmin',\n    'fmod',\n    'gamma_p',\n    'gamma_q',\n    'generalized_inverse',\n    'get_imag',\n    'get_real',\n    'head',\n    'hmm_hidden_state_prob',\n    'hmm_marginal',\n    'hypot',\n    'identity_matrix',\n    'inc_beta',\n    'integrate_1d',\n    'integrate_ode',\n    'integrate_ode_adams',\n    'integrate_ode_bdf',\n    'integrate_ode_rk45',\n    'int_step',\n    'inv',\n    'inv_cloglog',\n    'inv_erfc',\n    'inverse',\n    'inverse_spd',\n    'inv_fft',\n    'inv_fft2',\n    'inv_inc_beta',\n    'inv_logit',\n    'inv_Phi',\n    'inv_sqrt',\n    'inv_square',\n    'is_inf',\n    'is_nan',\n    'lambert_w0',\n    'lambert_wm1',\n    'lbeta',\n    'lchoose',\n    'ldexp',\n    'lgamma',\n    'linspaced_array',\n    'linspaced_int_array',\n    'linspaced_row_vector',\n    'linspaced_vector',\n    'lmgamma',\n    'lmultiply',\n    'log',\n    'log1m',\n    'log1m_exp',\n    'log1m_inv_logit',\n    'log1p',\n    'log1p_exp',\n    'log_determinant',\n    'log_diff_exp',\n    'log_falling_factorial',\n    'log_inv_logit',\n    'log_inv_logit_diff',\n    'logit',\n    'log_mix',\n    'log_modified_bessel_first_kind',\n    'log_rising_factorial',\n    'log_softmax',\n    'log_sum_exp',\n    'machine_precision',\n    'map_rect',\n    'matrix_exp',\n    'matrix_exp_multiply',\n    'matrix_power',\n    'max',\n    'mdivide_left_spd',\n    'mdivide_left_tri_low',\n    'mdivide_right_spd',\n    'mdivide_right_tri_low',\n    'mean',\n    'min',\n    'modified_bessel_first_kind',\n    'modified_bessel_second_kind',\n    'multiply_lower_tri_self_transpose',\n    'negative_infinity',\n    'norm',\n    'norm1',\n    'norm2',\n    'not_a_number',\n    'num_elements',\n    'ode_adams',\n    'ode_adams_tol',\n    'ode_adjoint_tol_ctl',\n    'ode_bdf',\n    'ode_bdf_tol',\n    'ode_ckrk',\n    'ode_ckrk_tol',\n    'ode_rk45',\n    'ode_rk45_tol',\n    'one_hot_array',\n    'one_hot_int_array',\n    'one_hot_row_vector',\n    'one_hot_vector',\n    'ones_array',\n    'ones_int_array',\n    'ones_row_vector',\n    'ones_vector',\n    'owens_t',\n    'Phi',\n    'Phi_approx',\n    'polar',\n    'positive_infinity',\n    'pow',\n    'print',\n    'prod',\n    'proj',\n    'qr',\n    'qr_Q',\n    'qr_R',\n    'qr_thin',\n    'qr_thin_Q',\n    'qr_thin_R',\n    'quad_form',\n    'quad_form_diag',\n    'quad_form_sym',\n    'quantile',\n    'rank',\n    'reduce_sum',\n    'reject',\n    'rep_array',\n    'rep_matrix',\n    'rep_row_vector',\n    'rep_vector',\n    'reverse',\n    'rising_factorial',\n    'round',\n    'row',\n    'rows',\n    'rows_dot_product',\n    'rows_dot_self',\n    'scale_matrix_exp_multiply',\n    'sd',\n    'segment',\n    'sin',\n    'singular_values',\n    'sinh',\n    'size',\n    'softmax',\n    'sort_asc',\n    'sort_desc',\n    'sort_indices_asc',\n    'sort_indices_desc',\n    'sqrt',\n    'square',\n    'squared_distance',\n    'step',\n    'sub_col',\n    'sub_row',\n    'sum',\n    'svd',\n    'svd_U',\n    'svd_V',\n    'symmetrize_from_lower_tri',\n    'tail',\n    'tan',\n    'tanh',\n    'target',\n    'tcrossprod',\n    'tgamma',\n    'to_array_1d',\n    'to_array_2d',\n    'to_complex',\n    'to_int',\n    'to_matrix',\n    'to_row_vector',\n    'to_vector',\n    'trace',\n    'trace_gen_quad_form',\n    'trace_quad_form',\n    'trigamma',\n    'trunc',\n    'uniform_simplex',\n    'variance',\n    'zeros_array',\n    'zeros_int_array',\n    'zeros_row_vector'\n  ];\n\n  const DISTRIBUTIONS = [\n    'bernoulli',\n    'bernoulli_logit',\n    'bernoulli_logit_glm',\n    'beta',\n    'beta_binomial',\n    'beta_proportion',\n    'binomial',\n    'binomial_logit',\n    'categorical',\n    'categorical_logit',\n    'categorical_logit_glm',\n    'cauchy',\n    'chi_square',\n    'dirichlet',\n    'discrete_range',\n    'double_exponential',\n    'exp_mod_normal',\n    'exponential',\n    'frechet',\n    'gamma',\n    'gaussian_dlm_obs',\n    'gumbel',\n    'hmm_latent',\n    'hypergeometric',\n    'inv_chi_square',\n    'inv_gamma',\n    'inv_wishart',\n    'inv_wishart_cholesky',\n    'lkj_corr',\n    'lkj_corr_cholesky',\n    'logistic',\n    'loglogistic',\n    'lognormal',\n    'multi_gp',\n    'multi_gp_cholesky',\n    'multinomial',\n    'multinomial_logit',\n    'multi_normal',\n    'multi_normal_cholesky',\n    'multi_normal_prec',\n    'multi_student_cholesky_t',\n    'multi_student_t',\n    'multi_student_t_cholesky',\n    'neg_binomial',\n    'neg_binomial_2',\n    'neg_binomial_2_log',\n    'neg_binomial_2_log_glm',\n    'normal',\n    'normal_id_glm',\n    'ordered_logistic',\n    'ordered_logistic_glm',\n    'ordered_probit',\n    'pareto',\n    'pareto_type_2',\n    'poisson',\n    'poisson_log',\n    'poisson_log_glm',\n    'rayleigh',\n    'scaled_inv_chi_square',\n    'skew_double_exponential',\n    'skew_normal',\n    'std_normal',\n    'std_normal_log',\n    'student_t',\n    'uniform',\n    'von_mises',\n    'weibull',\n    'wiener',\n    'wishart',\n    'wishart_cholesky'\n  ];\n\n  const BLOCK_COMMENT = hljs.COMMENT(\n    /\\/\\*/,\n    /\\*\\//,\n    {\n      relevance: 0,\n      contains: [\n        {\n          scope: 'doctag',\n          match: /@(return|param)/\n        }\n      ]\n    }\n  );\n\n  const INCLUDE = {\n    scope: 'meta',\n    begin: /#include\\b/,\n    end: /$/,\n    contains: [\n      {\n        match: /[a-z][a-z-._]+/,\n        scope: 'string'\n      },\n      hljs.C_LINE_COMMENT_MODE\n    ]\n  };\n\n  const RANGE_CONSTRAINTS = [\n    \"lower\",\n    \"upper\",\n    \"offset\",\n    \"multiplier\"\n  ];\n\n  return {\n    name: 'Stan',\n    aliases: [ 'stanfuncs' ],\n    keywords: {\n      $pattern: hljs.IDENT_RE,\n      title: BLOCKS,\n      type: TYPES,\n      keyword: STATEMENTS,\n      built_in: FUNCTIONS\n    },\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n      INCLUDE,\n      hljs.HASH_COMMENT_MODE,\n      BLOCK_COMMENT,\n      {\n        scope: 'built_in',\n        match: /\\s(pi|e|sqrt2|log2|log10)(?=\\()/,\n        relevance: 0\n      },\n      {\n        match: regex.concat(/[<,]\\s*/, regex.either(...RANGE_CONSTRAINTS), /\\s*=/),\n        keywords: RANGE_CONSTRAINTS\n      },\n      {\n        scope: 'keyword',\n        match: /\\btarget(?=\\s*\\+=)/,\n      },\n      {\n        // highlights the 'T' in T[,] for only Stan language distributrions\n        match: [\n          /~\\s*/,\n          regex.either(...DISTRIBUTIONS),\n          /(?:\\(\\))/,\n          /\\s*T(?=\\s*\\[)/\n        ],\n        scope: {\n          2: \"built_in\",\n          4: \"keyword\"\n        }\n      },\n      {\n        // highlights distributions that end with special endings\n        scope: 'built_in',\n        keywords: DISTRIBUTIONS,\n        begin: regex.concat(/\\w*/, regex.either(...DISTRIBUTIONS), /(_lpdf|_lupdf|_lpmf|_cdf|_lcdf|_lccdf|_qf)(?=\\s*[\\(.*\\)])/)\n      },\n      {\n        // highlights distributions after ~\n        begin: [\n          /~/,\n          /\\s*/,\n          regex.concat(regex.either(...DISTRIBUTIONS), /(?=\\s*[\\(.*\\)])/)\n        ],\n        scope: { 3: \"built_in\" }\n      },\n      {\n        // highlights user defined distributions after ~\n        begin: [\n          /~/,\n          /\\s*\\w+(?=\\s*[\\(.*\\)])/,\n          '(?!.*/\\b(' + regex.either(...DISTRIBUTIONS) + ')\\b)'\n        ],\n        scope: { 2: \"title.function\" }\n      },\n      {\n        // highlights user defined distributions with special endings\n        scope: 'title.function',\n        begin: /\\w*(_lpdf|_lupdf|_lpmf|_cdf|_lcdf|_lccdf|_qf)(?=\\s*[\\(.*\\)])/\n      },\n      {\n        scope: 'number',\n        match: regex.concat(\n          // Comes from @RunDevelopment accessed 11/29/2021 at\n          // https://github.com/PrismJS/prism/blob/c53ad2e65b7193ab4f03a1797506a54bbb33d5a2/components/prism-stan.js#L56\n\n          // start of big noncapture group which\n          // 1. gets numbers that are by themselves\n          // 2. numbers that are separated by _\n          // 3. numbers that are separted by .\n          /(?:\\b\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\B\\.\\d+(?:_\\d+)*)/,\n          // grabs scientific notation\n          // grabs complex numbers with i\n          /(?:[eE][+-]?\\d+(?:_\\d+)*)?i?(?!\\w)/\n        ),\n        relevance: 0\n      },\n      {\n        scope: 'string',\n        begin: /\"/,\n        end: /\"/\n      }\n    ]\n  };\n}\n\nmodule.exports = stan;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}