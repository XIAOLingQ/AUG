{"ast":null,"code":"/*\nLanguage: Lisp\nDescription: Generic lisp syntax\nAuthor: Vasily Polovnyov <vast@whiteants.net>\nCategory: lisp\n*/\n\nfunction lisp(hljs) {\n  const LISP_IDENT_RE = '[a-zA-Z_\\\\-+\\\\*\\\\/<=>&#][a-zA-Z0-9_\\\\-+*\\\\/<=>&#!]*';\n  const MEC_RE = '\\\\|[^]*?\\\\|';\n  const LISP_SIMPLE_NUMBER_RE = '(-|\\\\+)?\\\\d+(\\\\.\\\\d+|\\\\/\\\\d+)?((d|e|f|l|s|D|E|F|L|S)(\\\\+|-)?\\\\d+)?';\n  const LITERAL = {\n    className: 'literal',\n    begin: '\\\\b(t{1}|nil)\\\\b'\n  };\n  const NUMBER = {\n    className: 'number',\n    variants: [{\n      begin: LISP_SIMPLE_NUMBER_RE,\n      relevance: 0\n    }, {\n      begin: '#(b|B)[0-1]+(/[0-1]+)?'\n    }, {\n      begin: '#(o|O)[0-7]+(/[0-7]+)?'\n    }, {\n      begin: '#(x|X)[0-9a-fA-F]+(/[0-9a-fA-F]+)?'\n    }, {\n      begin: '#(c|C)\\\\(' + LISP_SIMPLE_NUMBER_RE + ' +' + LISP_SIMPLE_NUMBER_RE,\n      end: '\\\\)'\n    }]\n  };\n  const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {\n    illegal: null\n  });\n  const COMMENT = hljs.COMMENT(';', '$', {\n    relevance: 0\n  });\n  const VARIABLE = {\n    begin: '\\\\*',\n    end: '\\\\*'\n  };\n  const KEYWORD = {\n    className: 'symbol',\n    begin: '[:&]' + LISP_IDENT_RE\n  };\n  const IDENT = {\n    begin: LISP_IDENT_RE,\n    relevance: 0\n  };\n  const MEC = {\n    begin: MEC_RE\n  };\n  const QUOTED_LIST = {\n    begin: '\\\\(',\n    end: '\\\\)',\n    contains: ['self', LITERAL, STRING, NUMBER, IDENT]\n  };\n  const QUOTED = {\n    contains: [NUMBER, STRING, VARIABLE, KEYWORD, QUOTED_LIST, IDENT],\n    variants: [{\n      begin: '[\\'`]\\\\(',\n      end: '\\\\)'\n    }, {\n      begin: '\\\\(quote ',\n      end: '\\\\)',\n      keywords: {\n        name: 'quote'\n      }\n    }, {\n      begin: '\\'' + MEC_RE\n    }]\n  };\n  const QUOTED_ATOM = {\n    variants: [{\n      begin: '\\'' + LISP_IDENT_RE\n    }, {\n      begin: '#\\'' + LISP_IDENT_RE + '(::' + LISP_IDENT_RE + ')*'\n    }]\n  };\n  const LIST = {\n    begin: '\\\\(\\\\s*',\n    end: '\\\\)'\n  };\n  const BODY = {\n    endsWithParent: true,\n    relevance: 0\n  };\n  LIST.contains = [{\n    className: 'name',\n    variants: [{\n      begin: LISP_IDENT_RE,\n      relevance: 0\n    }, {\n      begin: MEC_RE\n    }]\n  }, BODY];\n  BODY.contains = [QUOTED, QUOTED_ATOM, LIST, LITERAL, NUMBER, STRING, COMMENT, VARIABLE, KEYWORD, MEC, IDENT];\n  return {\n    name: 'Lisp',\n    illegal: /\\S/,\n    contains: [NUMBER, hljs.SHEBANG(), LITERAL, STRING, COMMENT, QUOTED, QUOTED_ATOM, LIST, IDENT]\n  };\n}\nmodule.exports = lisp;","map":{"version":3,"names":["lisp","hljs","LISP_IDENT_RE","MEC_RE","LISP_SIMPLE_NUMBER_RE","LITERAL","className","begin","NUMBER","variants","relevance","end","STRING","inherit","QUOTE_STRING_MODE","illegal","COMMENT","VARIABLE","KEYWORD","IDENT","MEC","QUOTED_LIST","contains","QUOTED","keywords","name","QUOTED_ATOM","LIST","BODY","endsWithParent","SHEBANG","module","exports"],"sources":["E:/GLM-UML/llm-chat-demo/chat-frontend/node_modules/highlight.js/lib/languages/lisp.js"],"sourcesContent":["/*\nLanguage: Lisp\nDescription: Generic lisp syntax\nAuthor: Vasily Polovnyov <vast@whiteants.net>\nCategory: lisp\n*/\n\nfunction lisp(hljs) {\n  const LISP_IDENT_RE = '[a-zA-Z_\\\\-+\\\\*\\\\/<=>&#][a-zA-Z0-9_\\\\-+*\\\\/<=>&#!]*';\n  const MEC_RE = '\\\\|[^]*?\\\\|';\n  const LISP_SIMPLE_NUMBER_RE = '(-|\\\\+)?\\\\d+(\\\\.\\\\d+|\\\\/\\\\d+)?((d|e|f|l|s|D|E|F|L|S)(\\\\+|-)?\\\\d+)?';\n  const LITERAL = {\n    className: 'literal',\n    begin: '\\\\b(t{1}|nil)\\\\b'\n  };\n  const NUMBER = {\n    className: 'number',\n    variants: [\n      {\n        begin: LISP_SIMPLE_NUMBER_RE,\n        relevance: 0\n      },\n      { begin: '#(b|B)[0-1]+(/[0-1]+)?' },\n      { begin: '#(o|O)[0-7]+(/[0-7]+)?' },\n      { begin: '#(x|X)[0-9a-fA-F]+(/[0-9a-fA-F]+)?' },\n      {\n        begin: '#(c|C)\\\\(' + LISP_SIMPLE_NUMBER_RE + ' +' + LISP_SIMPLE_NUMBER_RE,\n        end: '\\\\)'\n      }\n    ]\n  };\n  const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null });\n  const COMMENT = hljs.COMMENT(\n    ';', '$',\n    { relevance: 0 }\n  );\n  const VARIABLE = {\n    begin: '\\\\*',\n    end: '\\\\*'\n  };\n  const KEYWORD = {\n    className: 'symbol',\n    begin: '[:&]' + LISP_IDENT_RE\n  };\n  const IDENT = {\n    begin: LISP_IDENT_RE,\n    relevance: 0\n  };\n  const MEC = { begin: MEC_RE };\n  const QUOTED_LIST = {\n    begin: '\\\\(',\n    end: '\\\\)',\n    contains: [\n      'self',\n      LITERAL,\n      STRING,\n      NUMBER,\n      IDENT\n    ]\n  };\n  const QUOTED = {\n    contains: [\n      NUMBER,\n      STRING,\n      VARIABLE,\n      KEYWORD,\n      QUOTED_LIST,\n      IDENT\n    ],\n    variants: [\n      {\n        begin: '[\\'`]\\\\(',\n        end: '\\\\)'\n      },\n      {\n        begin: '\\\\(quote ',\n        end: '\\\\)',\n        keywords: { name: 'quote' }\n      },\n      { begin: '\\'' + MEC_RE }\n    ]\n  };\n  const QUOTED_ATOM = { variants: [\n    { begin: '\\'' + LISP_IDENT_RE },\n    { begin: '#\\'' + LISP_IDENT_RE + '(::' + LISP_IDENT_RE + ')*' }\n  ] };\n  const LIST = {\n    begin: '\\\\(\\\\s*',\n    end: '\\\\)'\n  };\n  const BODY = {\n    endsWithParent: true,\n    relevance: 0\n  };\n  LIST.contains = [\n    {\n      className: 'name',\n      variants: [\n        {\n          begin: LISP_IDENT_RE,\n          relevance: 0,\n        },\n        { begin: MEC_RE }\n      ]\n    },\n    BODY\n  ];\n  BODY.contains = [\n    QUOTED,\n    QUOTED_ATOM,\n    LIST,\n    LITERAL,\n    NUMBER,\n    STRING,\n    COMMENT,\n    VARIABLE,\n    KEYWORD,\n    MEC,\n    IDENT\n  ];\n\n  return {\n    name: 'Lisp',\n    illegal: /\\S/,\n    contains: [\n      NUMBER,\n      hljs.SHEBANG(),\n      LITERAL,\n      STRING,\n      COMMENT,\n      QUOTED,\n      QUOTED_ATOM,\n      LIST,\n      IDENT\n    ]\n  };\n}\n\nmodule.exports = lisp;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}