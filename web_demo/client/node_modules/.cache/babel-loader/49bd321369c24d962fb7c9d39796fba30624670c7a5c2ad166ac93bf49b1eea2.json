{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// Enclose abbreviations in <abbr> tags\n//\nexport default function abbr_plugin(md) {\n  const escapeRE = md.utils.escapeRE;\n  const arrayReplaceAt = md.utils.arrayReplaceAt;\n\n  // ASCII characters in Cc, Sc, Sm, Sk categories we should terminate on;\n  // you can check character classes here:\n  // http://www.unicode.org/Public/UNIDATA/UnicodeData.txt\n  const OTHER_CHARS = ' \\r\\n$+<=>^`|~';\n  const UNICODE_PUNCT_RE = md.utils.lib.ucmicro.P.source;\n  const UNICODE_SPACE_RE = md.utils.lib.ucmicro.Z.source;\n  function abbr_def(state, startLine, endLine, silent) {\n    let labelEnd;\n    let pos = state.bMarks[startLine] + state.tShift[startLine];\n    const max = state.eMarks[startLine];\n    if (pos + 2 >= max) {\n      return false;\n    }\n    if (state.src.charCodeAt(pos++) !== 0x2A /* * */) {\n      return false;\n    }\n    if (state.src.charCodeAt(pos++) !== 0x5B /* [ */) {\n      return false;\n    }\n    const labelStart = pos;\n    for (; pos < max; pos++) {\n      const ch = state.src.charCodeAt(pos);\n      if (ch === 0x5B /* [ */) {\n        return false;\n      } else if (ch === 0x5D /* ] */) {\n        labelEnd = pos;\n        break;\n      } else if (ch === 0x5C /* \\ */) {\n        pos++;\n      }\n    }\n    if (labelEnd < 0 || state.src.charCodeAt(labelEnd + 1) !== 0x3A /* : */) {\n      return false;\n    }\n    if (silent) {\n      return true;\n    }\n    const label = state.src.slice(labelStart, labelEnd).replace(/\\\\(.)/g, '$1');\n    const title = state.src.slice(labelEnd + 2, max).trim();\n    if (label.length === 0) {\n      return false;\n    }\n    if (title.length === 0) {\n      return false;\n    }\n    if (!state.env.abbreviations) {\n      state.env.abbreviations = {};\n    }\n    // prepend ':' to avoid conflict with Object.prototype members\n    if (typeof state.env.abbreviations[':' + label] === 'undefined') {\n      state.env.abbreviations[':' + label] = title;\n    }\n    state.line = startLine + 1;\n    return true;\n  }\n  function abbr_replace(state) {\n    const blockTokens = state.tokens;\n    if (!state.env.abbreviations) {\n      return;\n    }\n    const regSimple = new RegExp('(?:' + Object.keys(state.env.abbreviations).map(function (x) {\n      return x.substr(1);\n    }).sort(function (a, b) {\n      return b.length - a.length;\n    }).map(escapeRE).join('|') + ')');\n    const regText = '(^|' + UNICODE_PUNCT_RE + '|' + UNICODE_SPACE_RE + '|[' + OTHER_CHARS.split('').map(escapeRE).join('') + '])' + '(' + Object.keys(state.env.abbreviations).map(function (x) {\n      return x.substr(1);\n    }).sort(function (a, b) {\n      return b.length - a.length;\n    }).map(escapeRE).join('|') + ')' + '($|' + UNICODE_PUNCT_RE + '|' + UNICODE_SPACE_RE + '|[' + OTHER_CHARS.split('').map(escapeRE).join('') + '])';\n    const reg = new RegExp(regText, 'g');\n    for (let j = 0, l = blockTokens.length; j < l; j++) {\n      if (blockTokens[j].type !== 'inline') {\n        continue;\n      }\n      let tokens = blockTokens[j].children;\n\n      // We scan from the end, to keep position when new tags added.\n      for (let i = tokens.length - 1; i >= 0; i--) {\n        const currentToken = tokens[i];\n        if (currentToken.type !== 'text') {\n          continue;\n        }\n        let pos = 0;\n        const text = currentToken.content;\n        reg.lastIndex = 0;\n        const nodes = [];\n\n        // fast regexp run to determine whether there are any abbreviated words\n        // in the current token\n        if (!regSimple.test(text)) {\n          continue;\n        }\n        let m;\n        while (m = reg.exec(text)) {\n          if (m.index > 0 || m[1].length > 0) {\n            const token = new state.Token('text', '', 0);\n            token.content = text.slice(pos, m.index + m[1].length);\n            nodes.push(token);\n          }\n          const token_o = new state.Token('abbr_open', 'abbr', 1);\n          token_o.attrs = [['title', state.env.abbreviations[':' + m[2]]]];\n          nodes.push(token_o);\n          const token_t = new state.Token('text', '', 0);\n          token_t.content = m[2];\n          nodes.push(token_t);\n          const token_c = new state.Token('abbr_close', 'abbr', -1);\n          nodes.push(token_c);\n          reg.lastIndex -= m[3].length;\n          pos = reg.lastIndex;\n        }\n        if (!nodes.length) {\n          continue;\n        }\n        if (pos < text.length) {\n          const token = new state.Token('text', '', 0);\n          token.content = text.slice(pos);\n          nodes.push(token);\n        }\n\n        // replace current node\n        blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);\n      }\n    }\n  }\n  md.block.ruler.before('reference', 'abbr_def', abbr_def, {\n    alt: ['paragraph', 'reference']\n  });\n  md.core.ruler.after('linkify', 'abbr_replace', abbr_replace);\n}\n;","map":{"version":3,"names":["abbr_plugin","md","escapeRE","utils","arrayReplaceAt","OTHER_CHARS","UNICODE_PUNCT_RE","lib","ucmicro","P","source","UNICODE_SPACE_RE","Z","abbr_def","state","startLine","endLine","silent","labelEnd","pos","bMarks","tShift","max","eMarks","src","charCodeAt","labelStart","ch","label","slice","replace","title","trim","length","env","abbreviations","line","abbr_replace","blockTokens","tokens","regSimple","RegExp","Object","keys","map","x","substr","sort","a","b","join","regText","split","reg","j","l","type","children","i","currentToken","text","content","lastIndex","nodes","test","m","exec","index","token","Token","push","token_o","attrs","token_t","token_c","block","ruler","before","alt","core","after"],"sources":["E:/GLM-UML/web_demo/client/node_modules/markdown-it-abbr/index.mjs"],"sourcesContent":["// Enclose abbreviations in <abbr> tags\n//\nexport default function abbr_plugin (md) {\n  const escapeRE        = md.utils.escapeRE\n  const arrayReplaceAt  = md.utils.arrayReplaceAt\n\n  // ASCII characters in Cc, Sc, Sm, Sk categories we should terminate on;\n  // you can check character classes here:\n  // http://www.unicode.org/Public/UNIDATA/UnicodeData.txt\n  const OTHER_CHARS      = ' \\r\\n$+<=>^`|~'\n\n  const UNICODE_PUNCT_RE = md.utils.lib.ucmicro.P.source\n  const UNICODE_SPACE_RE = md.utils.lib.ucmicro.Z.source\n\n  function abbr_def (state, startLine, endLine, silent) {\n    let labelEnd\n    let pos = state.bMarks[startLine] + state.tShift[startLine]\n    const max = state.eMarks[startLine]\n\n    if (pos + 2 >= max) { return false }\n\n    if (state.src.charCodeAt(pos++) !== 0x2A/* * */) { return false }\n    if (state.src.charCodeAt(pos++) !== 0x5B/* [ */) { return false }\n\n    const labelStart = pos\n\n    for (; pos < max; pos++) {\n      const ch = state.src.charCodeAt(pos)\n      if (ch === 0x5B /* [ */) {\n        return false\n      } else if (ch === 0x5D /* ] */) {\n        labelEnd = pos\n        break\n      } else if (ch === 0x5C /* \\ */) {\n        pos++\n      }\n    }\n\n    if (labelEnd < 0 || state.src.charCodeAt(labelEnd + 1) !== 0x3A/* : */) {\n      return false\n    }\n\n    if (silent) { return true }\n\n    const label = state.src.slice(labelStart, labelEnd).replace(/\\\\(.)/g, '$1')\n    const title = state.src.slice(labelEnd + 2, max).trim()\n    if (label.length === 0) { return false }\n    if (title.length === 0) { return false }\n    if (!state.env.abbreviations) { state.env.abbreviations = {} }\n    // prepend ':' to avoid conflict with Object.prototype members\n    if (typeof state.env.abbreviations[':' + label] === 'undefined') {\n      state.env.abbreviations[':' + label] = title\n    }\n\n    state.line = startLine + 1\n    return true\n  }\n\n  function abbr_replace (state) {\n    const blockTokens = state.tokens\n\n    if (!state.env.abbreviations) { return }\n\n    const regSimple = new RegExp('(?:' +\n      Object.keys(state.env.abbreviations).map(function (x) {\n        return x.substr(1)\n      }).sort(function (a, b) {\n        return b.length - a.length\n      }).map(escapeRE).join('|') +\n    ')')\n\n    const regText = '(^|' + UNICODE_PUNCT_RE + '|' + UNICODE_SPACE_RE +\n                    '|[' + OTHER_CHARS.split('').map(escapeRE).join('') + '])' +\n            '(' + Object.keys(state.env.abbreviations).map(function (x) {\n      return x.substr(1)\n    }).sort(function (a, b) {\n      return b.length - a.length\n    }).map(escapeRE).join('|') + ')' +\n            '($|' + UNICODE_PUNCT_RE + '|' + UNICODE_SPACE_RE +\n                    '|[' + OTHER_CHARS.split('').map(escapeRE).join('') + '])'\n\n    const reg = new RegExp(regText, 'g')\n\n    for (let j = 0, l = blockTokens.length; j < l; j++) {\n      if (blockTokens[j].type !== 'inline') { continue }\n      let tokens = blockTokens[j].children\n\n      // We scan from the end, to keep position when new tags added.\n      for (let i = tokens.length - 1; i >= 0; i--) {\n        const currentToken = tokens[i]\n        if (currentToken.type !== 'text') { continue }\n\n        let pos = 0\n        const text = currentToken.content\n        reg.lastIndex = 0\n        const nodes = []\n\n        // fast regexp run to determine whether there are any abbreviated words\n        // in the current token\n        if (!regSimple.test(text)) { continue }\n\n        let m\n\n        while ((m = reg.exec(text))) {\n          if (m.index > 0 || m[1].length > 0) {\n            const token = new state.Token('text', '', 0)\n            token.content = text.slice(pos, m.index + m[1].length)\n            nodes.push(token)\n          }\n\n          const token_o = new state.Token('abbr_open', 'abbr', 1)\n          token_o.attrs = [['title', state.env.abbreviations[':' + m[2]]]]\n          nodes.push(token_o)\n\n          const token_t = new state.Token('text', '', 0)\n          token_t.content = m[2]\n          nodes.push(token_t)\n\n          const token_c = new state.Token('abbr_close', 'abbr', -1)\n          nodes.push(token_c)\n\n          reg.lastIndex -= m[3].length\n          pos = reg.lastIndex\n        }\n\n        if (!nodes.length) { continue }\n\n        if (pos < text.length) {\n          const token = new state.Token('text', '', 0)\n          token.content = text.slice(pos)\n          nodes.push(token)\n        }\n\n        // replace current node\n        blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes)\n      }\n    }\n  }\n\n  md.block.ruler.before('reference', 'abbr_def', abbr_def, { alt: ['paragraph', 'reference'] })\n\n  md.core.ruler.after('linkify', 'abbr_replace', abbr_replace)\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}