{"ast":null,"code":"/*\nLanguage: Visual Basic .NET\nDescription: Visual Basic .NET (VB.NET) is a multi-paradigm, object-oriented programming language, implemented on the .NET Framework.\nAuthors: Poren Chiang <ren.chiang@gmail.com>, Jan Pilzer\nWebsite: https://docs.microsoft.com/dotnet/visual-basic/getting-started\nCategory: common\n*/\n\n/** @type LanguageFn */\nfunction vbnet(hljs) {\n  const regex = hljs.regex;\n  /**\n   * Character Literal\n   * Either a single character (\"a\"C) or an escaped double quote (\"\"\"\"C).\n   */\n  const CHARACTER = {\n    className: 'string',\n    begin: /\"(\"\"|[^/n])\"C\\b/\n  };\n  const STRING = {\n    className: 'string',\n    begin: /\"/,\n    end: /\"/,\n    illegal: /\\n/,\n    contains: [{\n      // double quote escape\n      begin: /\"\"/\n    }]\n  };\n\n  /** Date Literals consist of a date, a time, or both separated by whitespace, surrounded by # */\n  const MM_DD_YYYY = /\\d{1,2}\\/\\d{1,2}\\/\\d{4}/;\n  const YYYY_MM_DD = /\\d{4}-\\d{1,2}-\\d{1,2}/;\n  const TIME_12H = /(\\d|1[012])(:\\d+){0,2} *(AM|PM)/;\n  const TIME_24H = /\\d{1,2}(:\\d{1,2}){1,2}/;\n  const DATE = {\n    className: 'literal',\n    variants: [{\n      // #YYYY-MM-DD# (ISO-Date) or #M/D/YYYY# (US-Date)\n      begin: regex.concat(/# */, regex.either(YYYY_MM_DD, MM_DD_YYYY), / *#/)\n    }, {\n      // #H:mm[:ss]# (24h Time)\n      begin: regex.concat(/# */, TIME_24H, / *#/)\n    }, {\n      // #h[:mm[:ss]] A# (12h Time)\n      begin: regex.concat(/# */, TIME_12H, / *#/)\n    }, {\n      // date plus time\n      begin: regex.concat(/# */, regex.either(YYYY_MM_DD, MM_DD_YYYY), / +/, regex.either(TIME_12H, TIME_24H), / *#/)\n    }]\n  };\n  const NUMBER = {\n    className: 'number',\n    relevance: 0,\n    variants: [{\n      // Float\n      begin: /\\b\\d[\\d_]*((\\.[\\d_]+(E[+-]?[\\d_]+)?)|(E[+-]?[\\d_]+))[RFD@!#]?/\n    }, {\n      // Integer (base 10)\n      begin: /\\b\\d[\\d_]*((U?[SIL])|[%&])?/\n    }, {\n      // Integer (base 16)\n      begin: /&H[\\dA-F_]+((U?[SIL])|[%&])?/\n    }, {\n      // Integer (base 8)\n      begin: /&O[0-7_]+((U?[SIL])|[%&])?/\n    }, {\n      // Integer (base 2)\n      begin: /&B[01_]+((U?[SIL])|[%&])?/\n    }]\n  };\n  const LABEL = {\n    className: 'label',\n    begin: /^\\w+:/\n  };\n  const DOC_COMMENT = hljs.COMMENT(/'''/, /$/, {\n    contains: [{\n      className: 'doctag',\n      begin: /<\\/?/,\n      end: />/\n    }]\n  });\n  const COMMENT = hljs.COMMENT(null, /$/, {\n    variants: [{\n      begin: /'/\n    }, {\n      // TODO: Use multi-class for leading spaces\n      begin: /([\\t ]|^)REM(?=\\s)/\n    }]\n  });\n  const DIRECTIVES = {\n    className: 'meta',\n    // TODO: Use multi-class for indentation once available\n    begin: /[\\t ]*#(const|disable|else|elseif|enable|end|externalsource|if|region)\\b/,\n    end: /$/,\n    keywords: {\n      keyword: 'const disable else elseif enable end externalsource if region then'\n    },\n    contains: [COMMENT]\n  };\n  return {\n    name: 'Visual Basic .NET',\n    aliases: ['vb'],\n    case_insensitive: true,\n    classNameAliases: {\n      label: 'symbol'\n    },\n    keywords: {\n      keyword: 'addhandler alias aggregate ansi as async assembly auto binary by byref byval ' /* a-b */ + 'call case catch class compare const continue custom declare default delegate dim distinct do ' /* c-d */ + 'each equals else elseif end enum erase error event exit explicit finally for friend from function ' /* e-f */ + 'get global goto group handles if implements imports in inherits interface into iterator ' /* g-i */ + 'join key let lib loop me mid module mustinherit mustoverride mybase myclass ' /* j-m */ + 'namespace narrowing new next notinheritable notoverridable ' /* n */ + 'of off on operator option optional order overloads overridable overrides ' /* o */ + 'paramarray partial preserve private property protected public ' /* p */ + 'raiseevent readonly redim removehandler resume return ' /* r */ + 'select set shadows shared skip static step stop structure strict sub synclock ' /* s */ + 'take text then throw to try unicode until using when where while widening with withevents writeonly yield' /* t-y */,\n      built_in:\n      // Operators https://docs.microsoft.com/dotnet/visual-basic/language-reference/operators\n      'addressof and andalso await directcast gettype getxmlnamespace is isfalse isnot istrue like mod nameof new not or orelse trycast typeof xor '\n      // Type Conversion Functions https://docs.microsoft.com/dotnet/visual-basic/language-reference/functions/type-conversion-functions\n      + 'cbool cbyte cchar cdate cdbl cdec cint clng cobj csbyte cshort csng cstr cuint culng cushort',\n      type:\n      // Data types https://docs.microsoft.com/dotnet/visual-basic/language-reference/data-types\n      'boolean byte char date decimal double integer long object sbyte short single string uinteger ulong ushort',\n      literal: 'true false nothing'\n    },\n    illegal: '//|\\\\{|\\\\}|endif|gosub|variant|wend|^\\\\$ ' /* reserved deprecated keywords */,\n    contains: [CHARACTER, STRING, DATE, NUMBER, LABEL, DOC_COMMENT, COMMENT, DIRECTIVES]\n  };\n}\nmodule.exports = vbnet;","map":{"version":3,"names":["vbnet","hljs","regex","CHARACTER","className","begin","STRING","end","illegal","contains","MM_DD_YYYY","YYYY_MM_DD","TIME_12H","TIME_24H","DATE","variants","concat","either","NUMBER","relevance","LABEL","DOC_COMMENT","COMMENT","DIRECTIVES","keywords","keyword","name","aliases","case_insensitive","classNameAliases","label","built_in","type","literal","module","exports"],"sources":["E:/GLM-UML/llm-chat-demo/chat-frontend/node_modules/highlight.js/lib/languages/vbnet.js"],"sourcesContent":["/*\nLanguage: Visual Basic .NET\nDescription: Visual Basic .NET (VB.NET) is a multi-paradigm, object-oriented programming language, implemented on the .NET Framework.\nAuthors: Poren Chiang <ren.chiang@gmail.com>, Jan Pilzer\nWebsite: https://docs.microsoft.com/dotnet/visual-basic/getting-started\nCategory: common\n*/\n\n/** @type LanguageFn */\nfunction vbnet(hljs) {\n  const regex = hljs.regex;\n  /**\n   * Character Literal\n   * Either a single character (\"a\"C) or an escaped double quote (\"\"\"\"C).\n   */\n  const CHARACTER = {\n    className: 'string',\n    begin: /\"(\"\"|[^/n])\"C\\b/\n  };\n\n  const STRING = {\n    className: 'string',\n    begin: /\"/,\n    end: /\"/,\n    illegal: /\\n/,\n    contains: [\n      {\n        // double quote escape\n        begin: /\"\"/ }\n    ]\n  };\n\n  /** Date Literals consist of a date, a time, or both separated by whitespace, surrounded by # */\n  const MM_DD_YYYY = /\\d{1,2}\\/\\d{1,2}\\/\\d{4}/;\n  const YYYY_MM_DD = /\\d{4}-\\d{1,2}-\\d{1,2}/;\n  const TIME_12H = /(\\d|1[012])(:\\d+){0,2} *(AM|PM)/;\n  const TIME_24H = /\\d{1,2}(:\\d{1,2}){1,2}/;\n  const DATE = {\n    className: 'literal',\n    variants: [\n      {\n        // #YYYY-MM-DD# (ISO-Date) or #M/D/YYYY# (US-Date)\n        begin: regex.concat(/# */, regex.either(YYYY_MM_DD, MM_DD_YYYY), / *#/) },\n      {\n        // #H:mm[:ss]# (24h Time)\n        begin: regex.concat(/# */, TIME_24H, / *#/) },\n      {\n        // #h[:mm[:ss]] A# (12h Time)\n        begin: regex.concat(/# */, TIME_12H, / *#/) },\n      {\n        // date plus time\n        begin: regex.concat(\n          /# */,\n          regex.either(YYYY_MM_DD, MM_DD_YYYY),\n          / +/,\n          regex.either(TIME_12H, TIME_24H),\n          / *#/\n        ) }\n    ]\n  };\n\n  const NUMBER = {\n    className: 'number',\n    relevance: 0,\n    variants: [\n      {\n        // Float\n        begin: /\\b\\d[\\d_]*((\\.[\\d_]+(E[+-]?[\\d_]+)?)|(E[+-]?[\\d_]+))[RFD@!#]?/ },\n      {\n        // Integer (base 10)\n        begin: /\\b\\d[\\d_]*((U?[SIL])|[%&])?/ },\n      {\n        // Integer (base 16)\n        begin: /&H[\\dA-F_]+((U?[SIL])|[%&])?/ },\n      {\n        // Integer (base 8)\n        begin: /&O[0-7_]+((U?[SIL])|[%&])?/ },\n      {\n        // Integer (base 2)\n        begin: /&B[01_]+((U?[SIL])|[%&])?/ }\n    ]\n  };\n\n  const LABEL = {\n    className: 'label',\n    begin: /^\\w+:/\n  };\n\n  const DOC_COMMENT = hljs.COMMENT(/'''/, /$/, { contains: [\n    {\n      className: 'doctag',\n      begin: /<\\/?/,\n      end: />/\n    }\n  ] });\n\n  const COMMENT = hljs.COMMENT(null, /$/, { variants: [\n    { begin: /'/ },\n    {\n      // TODO: Use multi-class for leading spaces\n      begin: /([\\t ]|^)REM(?=\\s)/ }\n  ] });\n\n  const DIRECTIVES = {\n    className: 'meta',\n    // TODO: Use multi-class for indentation once available\n    begin: /[\\t ]*#(const|disable|else|elseif|enable|end|externalsource|if|region)\\b/,\n    end: /$/,\n    keywords: { keyword:\n        'const disable else elseif enable end externalsource if region then' },\n    contains: [ COMMENT ]\n  };\n\n  return {\n    name: 'Visual Basic .NET',\n    aliases: [ 'vb' ],\n    case_insensitive: true,\n    classNameAliases: { label: 'symbol' },\n    keywords: {\n      keyword:\n        'addhandler alias aggregate ansi as async assembly auto binary by byref byval ' /* a-b */\n        + 'call case catch class compare const continue custom declare default delegate dim distinct do ' /* c-d */\n        + 'each equals else elseif end enum erase error event exit explicit finally for friend from function ' /* e-f */\n        + 'get global goto group handles if implements imports in inherits interface into iterator ' /* g-i */\n        + 'join key let lib loop me mid module mustinherit mustoverride mybase myclass ' /* j-m */\n        + 'namespace narrowing new next notinheritable notoverridable ' /* n */\n        + 'of off on operator option optional order overloads overridable overrides ' /* o */\n        + 'paramarray partial preserve private property protected public ' /* p */\n        + 'raiseevent readonly redim removehandler resume return ' /* r */\n        + 'select set shadows shared skip static step stop structure strict sub synclock ' /* s */\n        + 'take text then throw to try unicode until using when where while widening with withevents writeonly yield' /* t-y */,\n      built_in:\n        // Operators https://docs.microsoft.com/dotnet/visual-basic/language-reference/operators\n        'addressof and andalso await directcast gettype getxmlnamespace is isfalse isnot istrue like mod nameof new not or orelse trycast typeof xor '\n        // Type Conversion Functions https://docs.microsoft.com/dotnet/visual-basic/language-reference/functions/type-conversion-functions\n        + 'cbool cbyte cchar cdate cdbl cdec cint clng cobj csbyte cshort csng cstr cuint culng cushort',\n      type:\n        // Data types https://docs.microsoft.com/dotnet/visual-basic/language-reference/data-types\n        'boolean byte char date decimal double integer long object sbyte short single string uinteger ulong ushort',\n      literal: 'true false nothing'\n    },\n    illegal:\n      '//|\\\\{|\\\\}|endif|gosub|variant|wend|^\\\\$ ' /* reserved deprecated keywords */,\n    contains: [\n      CHARACTER,\n      STRING,\n      DATE,\n      NUMBER,\n      LABEL,\n      DOC_COMMENT,\n      COMMENT,\n      DIRECTIVES\n    ]\n  };\n}\n\nmodule.exports = vbnet;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}