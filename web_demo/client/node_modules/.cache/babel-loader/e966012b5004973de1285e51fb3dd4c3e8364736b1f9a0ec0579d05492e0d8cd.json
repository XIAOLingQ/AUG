{"ast":null,"code":"/*\nLanguage: Haxe\nDescription: Haxe is an open source toolkit based on a modern, high level, strictly typed programming language.\nAuthor: Christopher Kaster <ikasoki@gmail.com> (Based on the actionscript.js language file by Alexander Myadzel)\nContributors: Kenton Hamaluik <kentonh@gmail.com>\nWebsite: https://haxe.org\n*/\n\nfunction haxe(hljs) {\n  const IDENT_RE = '[a-zA-Z_$][a-zA-Z0-9_$]*';\n\n  // C_NUMBER_RE with underscores and literal suffixes\n  const HAXE_NUMBER_RE = /(-?)(\\b0[xX][a-fA-F0-9_]+|(\\b\\d+(\\.[\\d_]*)?|\\.[\\d_]+)(([eE][-+]?\\d+)|i32|u32|i64|f64)?)/;\n  const HAXE_BASIC_TYPES = 'Int Float String Bool Dynamic Void Array ';\n  return {\n    name: 'Haxe',\n    aliases: ['hx'],\n    keywords: {\n      keyword: 'abstract break case cast catch continue default do dynamic else enum extern ' + 'final for function here if import in inline is macro never new override package private get set ' + 'public return static super switch this throw trace try typedef untyped using var while ' + HAXE_BASIC_TYPES,\n      built_in: 'trace this',\n      literal: 'true false null _'\n    },\n    contains: [{\n      className: 'string',\n      // interpolate-able strings\n      begin: '\\'',\n      end: '\\'',\n      contains: [hljs.BACKSLASH_ESCAPE, {\n        className: 'subst',\n        // interpolation\n        begin: /\\$\\{/,\n        end: /\\}/\n      }, {\n        className: 'subst',\n        // interpolation\n        begin: /\\$/,\n        end: /\\W\\}/\n      }]\n    }, hljs.QUOTE_STRING_MODE, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, {\n      className: 'number',\n      begin: HAXE_NUMBER_RE,\n      relevance: 0\n    }, {\n      className: 'variable',\n      begin: \"\\\\$\" + IDENT_RE\n    }, {\n      className: 'meta',\n      // compiler meta\n      begin: /@:?/,\n      end: /\\(|$/,\n      excludeEnd: true\n    }, {\n      className: 'meta',\n      // compiler conditionals\n      begin: '#',\n      end: '$',\n      keywords: {\n        keyword: 'if else elseif end error'\n      }\n    }, {\n      className: 'type',\n      // function types\n      begin: /:[ \\t]*/,\n      end: /[^A-Za-z0-9_ \\t\\->]/,\n      excludeBegin: true,\n      excludeEnd: true,\n      relevance: 0\n    }, {\n      className: 'type',\n      // types\n      begin: /:[ \\t]*/,\n      end: /\\W/,\n      excludeBegin: true,\n      excludeEnd: true\n    }, {\n      className: 'type',\n      // instantiation\n      begin: /new */,\n      end: /\\W/,\n      excludeBegin: true,\n      excludeEnd: true\n    }, {\n      className: 'title.class',\n      // enums\n      beginKeywords: 'enum',\n      end: /\\{/,\n      contains: [hljs.TITLE_MODE]\n    }, {\n      className: 'title.class',\n      // abstracts\n      begin: '\\\\babstract\\\\b(?=\\\\s*' + hljs.IDENT_RE + '\\\\s*\\\\()',\n      end: /[\\{$]/,\n      contains: [{\n        className: 'type',\n        begin: /\\(/,\n        end: /\\)/,\n        excludeBegin: true,\n        excludeEnd: true\n      }, {\n        className: 'type',\n        begin: /from +/,\n        end: /\\W/,\n        excludeBegin: true,\n        excludeEnd: true\n      }, {\n        className: 'type',\n        begin: /to +/,\n        end: /\\W/,\n        excludeBegin: true,\n        excludeEnd: true\n      }, hljs.TITLE_MODE],\n      keywords: {\n        keyword: 'abstract from to'\n      }\n    }, {\n      className: 'title.class',\n      // classes\n      begin: /\\b(class|interface) +/,\n      end: /[\\{$]/,\n      excludeEnd: true,\n      keywords: 'class interface',\n      contains: [{\n        className: 'keyword',\n        begin: /\\b(extends|implements) +/,\n        keywords: 'extends implements',\n        contains: [{\n          className: 'type',\n          begin: hljs.IDENT_RE,\n          relevance: 0\n        }]\n      }, hljs.TITLE_MODE]\n    }, {\n      className: 'title.function',\n      beginKeywords: 'function',\n      end: /\\(/,\n      excludeEnd: true,\n      illegal: /\\S/,\n      contains: [hljs.TITLE_MODE]\n    }],\n    illegal: /<\\//\n  };\n}\nmodule.exports = haxe;","map":{"version":3,"names":["haxe","hljs","IDENT_RE","HAXE_NUMBER_RE","HAXE_BASIC_TYPES","name","aliases","keywords","keyword","built_in","literal","contains","className","begin","end","BACKSLASH_ESCAPE","QUOTE_STRING_MODE","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","relevance","excludeEnd","excludeBegin","beginKeywords","TITLE_MODE","illegal","module","exports"],"sources":["E:/GLM-UML/web_demo/client/node_modules/highlight.js/lib/languages/haxe.js"],"sourcesContent":["/*\nLanguage: Haxe\nDescription: Haxe is an open source toolkit based on a modern, high level, strictly typed programming language.\nAuthor: Christopher Kaster <ikasoki@gmail.com> (Based on the actionscript.js language file by Alexander Myadzel)\nContributors: Kenton Hamaluik <kentonh@gmail.com>\nWebsite: https://haxe.org\n*/\n\nfunction haxe(hljs) {\n  const IDENT_RE = '[a-zA-Z_$][a-zA-Z0-9_$]*';\n\n  // C_NUMBER_RE with underscores and literal suffixes\n  const HAXE_NUMBER_RE = /(-?)(\\b0[xX][a-fA-F0-9_]+|(\\b\\d+(\\.[\\d_]*)?|\\.[\\d_]+)(([eE][-+]?\\d+)|i32|u32|i64|f64)?)/;\n\n  const HAXE_BASIC_TYPES = 'Int Float String Bool Dynamic Void Array ';\n\n  return {\n    name: 'Haxe',\n    aliases: [ 'hx' ],\n    keywords: {\n      keyword: 'abstract break case cast catch continue default do dynamic else enum extern '\n               + 'final for function here if import in inline is macro never new override package private get set '\n               + 'public return static super switch this throw trace try typedef untyped using var while '\n               + HAXE_BASIC_TYPES,\n      built_in:\n        'trace this',\n      literal:\n        'true false null _'\n    },\n    contains: [\n      {\n        className: 'string', // interpolate-able strings\n        begin: '\\'',\n        end: '\\'',\n        contains: [\n          hljs.BACKSLASH_ESCAPE,\n          {\n            className: 'subst', // interpolation\n            begin: /\\$\\{/,\n            end: /\\}/\n          },\n          {\n            className: 'subst', // interpolation\n            begin: /\\$/,\n            end: /\\W\\}/\n          }\n        ]\n      },\n      hljs.QUOTE_STRING_MODE,\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      {\n        className: 'number',\n        begin: HAXE_NUMBER_RE,\n        relevance: 0\n      },\n      {\n        className: 'variable',\n        begin: \"\\\\$\" + IDENT_RE,\n      },\n      {\n        className: 'meta', // compiler meta\n        begin: /@:?/,\n        end: /\\(|$/,\n        excludeEnd: true,\n      },\n      {\n        className: 'meta', // compiler conditionals\n        begin: '#',\n        end: '$',\n        keywords: { keyword: 'if else elseif end error' }\n      },\n      {\n        className: 'type', // function types\n        begin: /:[ \\t]*/,\n        end: /[^A-Za-z0-9_ \\t\\->]/,\n        excludeBegin: true,\n        excludeEnd: true,\n        relevance: 0\n      },\n      {\n        className: 'type', // types\n        begin: /:[ \\t]*/,\n        end: /\\W/,\n        excludeBegin: true,\n        excludeEnd: true\n      },\n      {\n        className: 'type', // instantiation\n        begin: /new */,\n        end: /\\W/,\n        excludeBegin: true,\n        excludeEnd: true\n      },\n      {\n        className: 'title.class', // enums\n        beginKeywords: 'enum',\n        end: /\\{/,\n        contains: [ hljs.TITLE_MODE ]\n      },\n      {\n        className: 'title.class', // abstracts\n        begin: '\\\\babstract\\\\b(?=\\\\s*' + hljs.IDENT_RE + '\\\\s*\\\\()',\n        end: /[\\{$]/,\n        contains: [\n          {\n            className: 'type',\n            begin: /\\(/,\n            end: /\\)/,\n            excludeBegin: true,\n            excludeEnd: true\n          },\n          {\n            className: 'type',\n            begin: /from +/,\n            end: /\\W/,\n            excludeBegin: true,\n            excludeEnd: true\n          },\n          {\n            className: 'type',\n            begin: /to +/,\n            end: /\\W/,\n            excludeBegin: true,\n            excludeEnd: true\n          },\n          hljs.TITLE_MODE\n        ],\n        keywords: { keyword: 'abstract from to' }\n      },\n      {\n        className: 'title.class', // classes\n        begin: /\\b(class|interface) +/,\n        end: /[\\{$]/,\n        excludeEnd: true,\n        keywords: 'class interface',\n        contains: [\n          {\n            className: 'keyword',\n            begin: /\\b(extends|implements) +/,\n            keywords: 'extends implements',\n            contains: [\n              {\n                className: 'type',\n                begin: hljs.IDENT_RE,\n                relevance: 0\n              }\n            ]\n          },\n          hljs.TITLE_MODE\n        ]\n      },\n      {\n        className: 'title.function',\n        beginKeywords: 'function',\n        end: /\\(/,\n        excludeEnd: true,\n        illegal: /\\S/,\n        contains: [ hljs.TITLE_MODE ]\n      }\n    ],\n    illegal: /<\\//\n  };\n}\n\nmodule.exports = haxe;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}